from supporting_functions import *


class ClassroomSettingsHandlers(SupportingFunctions):
    def __init__(self, bot: Bot, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands,
                 notification_db: NotificationCommands, event_db: EventCommands) -> None:
        """Initialization"""
        super().__init__(bot=bot, user_db=user_db, classroom_db=classroom_db,
                         technical_support_db=technical_support_db, diary_homework_db=diary_homework_db,
                         role_db=role_db, notification_db=notification_db, event_db=event_db)

    async def s_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_CLASSROOM_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_CLASSROOM_SETTINGS, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–û—Å–Ω–æ–≤–Ω—ã–µ":
            trans_message = "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞"
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            notification_dict = self.notification_db.get_notification_values_dict(user_id, classroom_id)

            trans_message = "–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç—å/–Ω–µ –ø–æ–ª—É—á–∞—Ç—å"
            await self.state_transition(user_id, States.S_NOTIFICATION_SETTINGS_CLASSROOM_SETTINGS, trans_message,
                                        *notification_dict.values())

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞..."
            await self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES, trans_message,
                                        sign=self.get_sign(user_id))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_notification_settings_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_NOTIFICATION_SETTINGS_CLASSROOM_SETTINGS"""
        if payload is None:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            notification_dict = self.notification_db.get_notification_values_dict(user_id, classroom_id)

            await self.state_transition(user_id, States.S_NOTIFICATION_SETTINGS_CLASSROOM_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", *notification_dict.values())

        elif payload["text"] in ["–ö—Ç–æ-—Ç–æ –≤—Å—Ç—É–ø–∏–ª", "–ö—Ç–æ-—Ç–æ —É—à–µ–ª", "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "–°–æ–±—ã—Ç–∏—è"]:
            payload_text_meaning_dict = {
                "–ö—Ç–æ-—Ç–æ –≤—Å—Ç—É–ø–∏–ª": "new_classmate",
                "–ö—Ç–æ-—Ç–æ —É—à–µ–ª": "leave_classmate",
                "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞": "requests",
                "–°–æ–±—ã—Ç–∏—è": "events"
            }
            notification_type = payload_text_meaning_dict[payload["text"]]

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.notification_db.update_notification_value(user_id, classroom_id, notification_type)
            notification_dict = self.notification_db.get_notification_values_dict(user_id, classroom_id)

            trans_message = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
            await self.state_transition(user_id, States.S_NOTIFICATION_SETTINGS_CLASSROOM_SETTINGS,
                                        f"{trans_message}\n\n"
                                        f"–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ "
                                        f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç—å/–Ω–µ"
                                        f" –ø–æ–ª—É—á–∞—Ç—å",
                                        *notification_dict.values())

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–æ–ª–∏ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ!"
            await self.state_transition(user_id, States.S_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_main_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–¢–∏–ø –∫–ª–∞—Å—Å–∞":
            if payload["can"]:
                keyboard_type_kwargs = {
                    "–ü—É–±–ª–∏—á–Ω—ã–π": {"public_color": "positive", "invite_color": "negative", "close_color": "negative"},
                    "–ó–∞—è–≤–∫–∏": {"public_color": "negative", "invite_color": "positive", "close_color": "negative"},
                    "–ó–∞–∫—Ä—ã—Ç—ã–π": {"public_color": "negative", "invite_color": "negative", "close_color": "positive"}
                }
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                access = self.classroom_db.get_classroom_access(classroom_id)
                keyboard_kwargs = keyboard_type_kwargs[access]

                trans_message = "–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∫–ª–∞—Å—Å–∞ (–∑–µ–ª–µ–Ω—ã–º –ø–æ–∫—Ä–∞—à–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç–∏–ø):"
                await self.state_transition(user_id,
                                            States.S_ACCESS_MAIN_CLASSROOM_SETTINGS, trans_message, **keyboard_kwargs)
            else:
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS,
                                            "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å —Ç–∏–ø –∫–ª–∞—Å—Å–∞ –∏–∑-"
                                            "–∑–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞":
            if payload["can"]:
                trans_message = "–í–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–¥–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤):"
                await self.state_transition(user_id, States.S_CLASSROOM_NAME_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS,
                                            "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"
                                            " –∏–∑-–∑–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã":
            if payload["can"]:
                trans_message = "–í–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã (–¥–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–∞):"
                await self.state_transition(user_id, States.S_SCHOOL_NAME_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS,
                                            "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã"
                                            " –∏–∑-–∑–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞":
            if payload["can"]:
                trans_message = "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–¥–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):"
                await self.state_transition(user_id, States.S_DESCRIPTION_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS,
                                            "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"
                                            " –∏–∑-–∑–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
            if payload["can"]:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

                trans_message = f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_limit}\n\n" \
                                f"–í–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ " \
                                f"—Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 40)"
                await self.state_transition(user_id, States.S_LIMIT_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç"
                                                                                       " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑-–∑–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞":
            trans_message = "–ú–µ—Å—Ç–æ, –≥–¥–µ —Å—Ç–æ–∏—Ç –±—ã—Ç—å –ø–æ–æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ"
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞..."
            await self.state_transition(user_id, States.S_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_main_dangerous_zone_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞—Å—Å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            admin_role_id = self.role_db.get_admin_role_id(classroom_id)
            role_id = self.role_db.get_role_id_by_user_id(user_id, classroom_id)

            if admin_role_id == role_id:
                trans_message = "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞—Å—Å –±—É–¥—É—á–∏ –∞–¥–º–∏–Ω–æ–º!"
                await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS, trans_message)
            else:
                self.classroom_db.delete_student(classroom_id, user_id)
                keyboard_kwarg = self.get_look_keyboard_kwargs(user_id, classroom_id)
                await self.notify_leave_classmate(user_id, classroom_id, kicked=False)

                trans_message = "–¢—ã –ø–æ–∫–∏–Ω—É–ª –∫–ª–∞—Å—Å!"
                await self.state_transition(user_id, States.S_LOOK_CLASSROOM, trans_message,
                                            classroom_type=keyboard_kwarg)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å":
            trans_message = "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å?"
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_DELETE_ONE_CLASSROOM_SETTINGS,
                                        trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞..."
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_main_dangerous_zone_delete_one_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_DANGEROUS_ZONE_DELETE_ONE_CLASSROOM_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_DELETE_ONE_CLASSROOM_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–î–∞":
            trans_message = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_DELETE_TWO_CLASSROOM_SETTINGS,
                                        trans_message)

        elif payload["text"] == "–ù–µ—Ç":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É..."
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_main_dangerous_zone_delete_two_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_DANGEROUS_ZONE_DELETE_TWO_CLASSROOM_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_DELETE_TWO_CLASSROOM_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            classroom_name = self.classroom_db.get_classroom_name(classroom_id)
            self.classroom_db.delete_classroom(classroom_id)
            self.classroom_db.update_user_customize_classroom_id(user_id, None)

            trans_message = f"–ö–ª–∞—Å—Å —Å –∏–º–µ–Ω–µ–º {classroom_name} —É–¥–∞–ª—ë–Ω!"
            await self.state_transition(user_id, States.S_NOTHING, trans_message)

        elif payload["text"] == "–ù–µ —É–¥–∞–ª—è—Ç—å":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É..."
            await self.state_transition(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_access_main_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_ACCESS_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            keyboard_type_kwargs = {
                "–ü—É–±–ª–∏—á–Ω—ã–π": {"public_color": "positive", "invite_color": "negative", "close_color": "negative"},
                "–ó–∞—è–≤–∫–∏": {"public_color": "negative", "invite_color": "positive", "close_color": "negative"},
                "–ó–∞–∫—Ä—ã—Ç—ã–π": {"public_color": "negative", "invite_color": "negative", "close_color": "positive"}
            }
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            access = self.classroom_db.get_classroom_access(classroom_id)
            keyboard_kwargs = keyboard_type_kwargs[access]

            await self.state_transition(user_id, States.S_ACCESS_MAIN_CLASSROOM_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                                        **keyboard_kwargs)

        elif payload["text"] in ["–ü—É–±–ª–∏—á–Ω—ã–π", "–ó–∞—è–≤–∫–∏", "–ó–∞–∫—Ä—ã—Ç—ã–π"]:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_classroom_access(classroom_id, payload["text"])

            trans_message = f"–¢–∏–ø –∫–ª–∞—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {payload['text']}!"
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_classroom_name_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_CLASSROOM_NAME_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            if len(message) > 12:
                trans_message = "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 12 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                await self.state_transition(user_id, States.S_CLASSROOM_NAME_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_name(classroom_id, message)

                trans_message = f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {message}"
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_school_name_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_SCHOOL_NAME_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            if len(message) > 32:
                trans_message = "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                await self.state_transition(user_id, States.S_SCHOOL_NAME_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_school_name(classroom_id, message)

                trans_message = f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: {message}"
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_description_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_DESCRIPTION_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            if len(message) > 200:
                trans_message = "–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                await self.state_transition(user_id, States.S_DESCRIPTION_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_description(classroom_id, message)

                trans_message = f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {message}"
                await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_limit_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_LIMIT_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            ask_message = f"–í–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ " \
                          f"—Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 40)"

            if message.strip().isdigit():
                new_members_limit = int(message.strip())

                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                members_count = len(self.classroom_db.get_dict_of_classroom_users(classroom_id))
                old_members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

                if new_members_limit == old_members_limit:
                    trans_message = f"–¢–∞–∫–æ–π –ª–∏–º–∏—Ç —É–∂–µ –∏ —Ç–∞–∫ –∑–∞–¥–∞–Ω\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_LIMIT_MAIN_CLASSROOM_SETTINGS, trans_message)
                elif members_count <= new_members_limit <= 40:
                    self.classroom_db.update_classroom_members_limit(classroom_id, new_members_limit)

                    trans_message = "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!"
                    await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)
                else:
                    trans_message = f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª-–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –±–æ–ª—å—à–µ 40\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_LIMIT_MAIN_CLASSROOM_SETTINGS, trans_message)
            else:
                trans_message = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}"
                await self.state_transition(user_id, States.S_LIMIT_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            await self.state_transition(user_id, States.S_MAIN_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)
