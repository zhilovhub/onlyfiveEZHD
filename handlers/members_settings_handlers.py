from supporting_functions import *


class MembersSettingsHandlers(SupportingFunctions):
    def __init__(self, bot: Bot, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands,
                 notification_db: NotificationCommands, event_db: EventCommands, admin_panel_db: AdminCommands) -> None:
        """Initialization"""
        super().__init__(bot=bot, user_db=user_db, classroom_db=classroom_db,
                         technical_support_db=technical_support_db, diary_homework_db=diary_homework_db,
                         role_db=role_db, notification_db=notification_db, event_db=event_db,
                         admin_panel_db=admin_panel_db)

    async def s_members_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MEMBERS_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            trans_message = f"{role_names_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç—Ä–æ–≤–∞–Ω–∏—è:"
            await self.state_transition(user_id, States.S_CHOOSE_ROLE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            trans_message = f"{role_names_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ:"
            await self.state_transition(user_id, States.S_CHOOSE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞":
            if payload["can"]:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
                members_text = self.get_members_text(roles_dictionary)

                trans_message = f"{members_text}\n\n–í–ø–∏—à–∏ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:"
                await self.state_transition(user_id, States.S_DELETE_MEMBER_MEMBERS_SETTINGS, trans_message)
            else:
                await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∫–∏–∫–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑-–∑–∞ "
                                                                                "—Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–ü—Ä–∏–≥–ª. —Å—Å—ã–ª–∫–∞":
            if payload["can"]:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                invite_code = self.classroom_db.get_classroom_invite_code(classroom_id)

                trans_message = f"–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞üëáüèª\n\n" \
                                f"[club{GROUP_ID}|onlyfiveEZHD/invite_link/{invite_code}]"
                await self.state_transition(user_id, States.S_MEMBERS_SETTINGS,
                                            trans_message, sign=self.get_sign(user_id))
            else:
                await self.state_transition(user_id, States.S_MEMBERS_SETTINGS,
                                            "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑-–∑–∞ "
                                            "—Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            if len(all_role_names) > 2:
                trans_message = f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–¥–∞–ª–∏—Ç–µ, –≤–æ–∑—å–º—É—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–æ–ª—å\n" \
                                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n{role_names_text}"
                await self.state_transition(user_id, States.S_DELETE_ROLE_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = f"–í –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–¥–∞–ª–∏—Ç—å!\n\n{role_names_text}"
                await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            if len(all_role_names) < 8:
                trans_message = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π\n\n–í –∫–ª–∞—Å—Å–µ " \
                                "–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 8 —Ä–æ–ª–µ–π, –Ω–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 (–∞–¥–º–∏–Ω, —É—á–∞—Å—Ç–Ω–∏–∫)" \
                                ". –†–æ–ª—å –∞–¥–º–∏–Ω–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞—Å—Å–∞, —ç—Ç–∞ —Ä–æ–ª—å –∏–º–µ–µ—Ç –≤—Å–µ " \
                                "–ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n\n–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–ª—É—á–∞—é—Ç —Ç–µ, –∫—Ç–æ —Ç–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ –≤–æ—à–ª–∏ –≤ –∫–ª–∞—Å—Å. " \
                                " –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–∞ —Ä–æ–ª—å —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∫–ª–∞—Å—Å–∞, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è " \
                                "–∫–ª–∞—Å—Å–∞ –∏ –∫–∏–∫–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n–†–µ–∫–æ–º–µ–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π —Å " \
                                "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–µ–¥—å —ç—Ç—É —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" \
                                " –±—É–¥—É—Ç –∏–º–µ—Ç—å –≤—Å–µ –Ω–æ–≤–µ–Ω—å–∫–∏–µ –≤ –∫–ª–∞—Å—Å–µ\n\n" \
                                f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n{role_names_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ (–º–∞–∫—Å. " \
                                f"20 —Å–∏–º–≤–æ–ª–æ–≤), –æ–Ω–∞ " \
                                f"–≤–æ–∑—å–º—ë—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –º–æ–∂–Ω–æ " \
                                f"–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å):"
                await self.state_transition(user_id, States.S_ADD_ROLE_ENTER_NAME_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = f"–í—ã —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–æ–ª–µ–π - 8!\n\n{role_names_text}"
                await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞..."
            await self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES, trans_message,
                                        sign=self.get_sign(user_id))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_add_role_enter_name_members_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ADD_ROLE_ENTER_NAME_MEMBERS_SETTINGS"""
        if payload is None:
            if len(message) <= 20:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                old_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)

                if message not in old_role_names:
                    self.role_db.insert_new_role(classroom_id, message.strip())
                    role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
                    role_names_text = "\n".join(
                        [f"{ind}. {role_name}" for ind, role_name in enumerate(role_names, start=1)])

                    trans_message = f"–ù–æ–≤–∞—è —Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n{role_names_text}"
                    await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)
                else:
                    trans_message = "–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                    await self.state_transition(user_id, States.S_ADD_ROLE_ENTER_NAME_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                await self.state_transition(user_id, States.S_ADD_ROLE_ENTER_NAME_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_delete_role_members_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_DELETE_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            ask_message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, —É–¥–∞–ª–∏—Ç—å –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ:"

            if message.isdigit():
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                role_index = int(message)
                all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)

                if 0 < role_index <= len(all_role_names):
                    admin_role_name = self.role_db.get_admin_role_name(classroom_id)
                    default_role_name = self.role_db.get_default_role_name(classroom_id)
                    role_name = all_role_names[role_index - 1]

                    if role_name != admin_role_name and role_name != default_role_name:
                        default_role_id = self.role_db.get_default_role_id(classroom_id)
                        role_id = self.role_db.get_role_id_by_name(classroom_id, role_name)

                        self.role_db.update_all_roles(role_id, default_role_id)
                        self.role_db.delete_role(role_id)

                        trans_message = "–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞!"
                        await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)
                    else:
                        trans_message = f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–æ–ª—å\n\n{ask_message}"
                        await self.state_transition(user_id, States.S_DELETE_ROLE_MEMBERS_SETTINGS, trans_message)
                else:
                    trans_message = "–ù–æ–º–µ—Ä —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ" \
                                    f" –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–ª–µ–π\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_DELETE_ROLE_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ\n\n{ask_message}"
                await self.state_transition(user_id, States.S_DELETE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_delete_member_members_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_DELETE_MEMBER_MEMBERS_SETTINGS"""
        if payload is None:
            ask_message = "–í–ø–∏—à–∏ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É–¥–∞–ª–∏—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ:"

            if message.isdigit():
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)
                member_index = int(message) - 1

                if 0 <= member_index < len(members_dictionary):
                    roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
                    admin_role_id = self.role_db.get_admin_role_id(classroom_id)

                    ind = 0
                    trans_message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
                    for role_id, member_ids in roles_dictionary.items():
                        for member_id in member_ids:
                            if ind == member_index:
                                if role_id != admin_role_id and member_id != user_id:
                                    self.classroom_db.delete_student(classroom_id, member_id)
                                    new_roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
                                    new_members_text = self.get_members_text(new_roles_dictionary)

                                    await self.notify_to_kicked_classmate(member_id, classroom_id)
                                    await self.notify_leave_classmate(member_id, classroom_id, kicked=True,
                                                                      without_user_ids=[user_id])

                                    trans_message = f"{new_members_text}\n\n–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω!\n\n{ask_message}"
                                elif member_id == user_id:
                                    trans_message = f"–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –≤—ã–≥–Ω–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è\n\n{ask_message}"
                                elif role_id == admin_role_id:
                                    trans_message = f"–ù–µ–ª—å–∑—è –≤—ã–≥–Ω–∞—Ç—å –∞–¥–º–∏–Ω–∞\n\n{ask_message}"
                                break
                            ind += 1
                        else:
                            continue
                        await self.state_transition(user_id, States.S_DELETE_MEMBER_MEMBERS_SETTINGS, trans_message)
                        break

                else:
                    trans_message = f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ " \
                                    f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_DELETE_MEMBER_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ\n\n{ask_message}"
                await self.state_transition(user_id, States.S_DELETE_MEMBER_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_choose_role_members_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_CHOOSE_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            ask_message = "–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ:"

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            if message.isdigit():
                role_index = int(message)

                if 0 < role_index <= len(all_role_names):
                    role_name = all_role_names[role_index - 1]
                    admin_role_id = self.role_db.get_admin_role_id(classroom_id)
                    role_id = self.role_db.get_role_id_by_name(classroom_id, role_name)

                    if role_id == admin_role_id:
                        trans_message = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–≥–æ-—Ç–æ —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∞? –ü–æ—Å–ª–µ " \
                                        "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∏ –≤–æ–∑—å–º—ë—Ç–µ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–æ–ª—å"
                        await self.state_transition(user_id, States.S_CHOOSE_ADMIN_ROLE_CONFIRMATION_MEMBERS_SETTINGS,
                                                    trans_message)
                    else:
                        roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
                        members_text = self.get_members_text(roles_dictionary)

                        trans_message = f"{members_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ " \
                                        f"–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å - {role_name}"
                        await self.state_transition(user_id, States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS,
                                                    trans_message)
                    self.role_db.update_user_customize_role_id(user_id, role_id)
                else:
                    trans_message = f"{all_role_names_text}\n\n–ù–æ–º–µ—Ä —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º" \
                                    f" –∏–ª–∏ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–ª–µ–π\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_CHOOSE_ROLE_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = f"{all_role_names_text}\n\n–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ\n\n{ask_message}"
                await self.state_transition(user_id, States.S_CHOOSE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_choose_admin_role_confirmation_members_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_CHOOSE_ADMIN_ROLE_CONFIRMATION_MEMBERS_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_CHOOSE_ADMIN_ROLE_CONFIRMATION_MEMBERS_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–ù–µ—Ç":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            self.role_db.update_user_customize_role_id(user_id, None)

            trans_message = f"{all_role_names_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ:"
            await self.state_transition(user_id, States.S_CHOOSE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–î–∞":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
            members_text = self.get_members_text(roles_dictionary)

            trans_message = f"{members_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ " \
                            f"–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å - {admin_role_name}"
            await self.state_transition(user_id, States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_choose_member_change_role_members_settings_handler(self, user_id: int, message: str, payload: dict
                                                                   ) -> None:
        """Handling States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            new_role_id = self.role_db.get_customizing_role_id(user_id)
            role_name = self.role_db.get_role_name(new_role_id)
            ask_message = f"–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å - {role_name}"

            if message.isdigit():
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)
                member_index = int(message) - 1

                if 0 <= member_index < len(members_dictionary):
                    roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
                    members_text = self.get_members_text(roles_dictionary)

                    ind = 0
                    for role_id, member_ids in roles_dictionary.items():
                        for member_id in member_ids:
                            if ind == member_index:
                                admin_role_id = self.role_db.get_admin_role_id(classroom_id)

                                if member_id != user_id and role_id != new_role_id:
                                    member_student_id = self.classroom_db.get_student_id(member_id, classroom_id)
                                    self.role_db.update_student_role(member_student_id, new_role_id)

                                    if admin_role_id == new_role_id:
                                        default_role_id = self.role_db.get_default_role_id(classroom_id)
                                        student_id = self.classroom_db.get_student_id(user_id, classroom_id)
                                        self.role_db.update_student_role(student_id, default_role_id)

                                    new_roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
                                    new_members_text = self.get_members_text(new_roles_dictionary)

                                    if admin_role_id == new_role_id:
                                        self.role_db.update_user_customize_role_id(user_id, None)

                                        trans_message = f"{new_members_text}\n\n–ù–æ–≤–∞—è —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n\n–í—ã" \
                                                        f" –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω"
                                        await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)
                                    else:
                                        trans_message = f"{new_members_text}\n\n–ù–æ–≤–∞—è —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!" \
                                                        f"\n\n{ask_message}"
                                        await self.state_transition(user_id,
                                                                    States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS,
                                                                    trans_message)
                                elif member_id == user_id:
                                    trans_message = f"{members_text}–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ " \
                                                    f"—Ä–æ–ª—å\n\n{ask_message}"
                                    await self.state_transition(user_id,
                                                                States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS,
                                                                trans_message)
                                elif role_id == new_role_id:
                                    trans_message = f"{members_text}\n\n–£ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å!\n\n" \
                                                    f"{ask_message}"
                                    await self.state_transition(user_id,
                                                                States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS,
                                                                trans_message)
                                break
                            ind += 1
                        else:
                            continue
                        break

                else:
                    trans_message = f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ " \
                                    f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS,
                                                trans_message)
            else:
                trans_message = f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ\n\n{ask_message}"
                await self.state_transition(user_id, States.S_CHOOSE_MEMBER_CHANGE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)
            self.role_db.update_user_customize_role_id(user_id, None)

            trans_message = f"{all_role_names_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ:"
            await self.state_transition(user_id, States.S_CHOOSE_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_choose_role_edit_role_members_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_CHOOSE_ROLE_EDIT_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            ask_message = "–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ:"

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)

            if message.isdigit():
                role_index = int(message)

                if 0 < role_index <= len(all_role_names):
                    role_name = all_role_names[role_index - 1]
                    role_id = self.role_db.get_role_id_by_name(classroom_id, role_name)
                    self.role_db.update_user_customize_role_id(user_id, role_id)

                    role_properties_dict = self.role_db.get_role_properties_dict(role_id)
                    role_properties_text = self.get_role_properties_text(role_properties_dict)

                    await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS, role_properties_text)
                else:
                    trans_message = f"{all_role_names_text}\n\n–ù–æ–º–µ—Ä —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º" \
                                    f" –∏–ª–∏ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–ª–µ–π\n\n{ask_message}"
                    await self.state_transition(user_id, States.S_CHOOSE_ROLE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = f"{all_role_names_text}\n\n–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ\n\n{ask_message}"
                await self.state_transition(user_id, States.S_CHOOSE_ROLE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            await self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_edit_role_members_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–ö–ª–∞—Å—Å":
            role_id = self.role_db.get_customizing_role_id(user_id)
            classroom_role_properties_dictionary = self.role_db.get_classroom_role_properties_dict(role_id)
            color_values = self.get_edit_role_keyboard_color_values(classroom_role_properties_dictionary)

            trans_message = "–ß—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å –∫–ª–∞—Å—Å–æ–º:"
            await self.state_transition(user_id, States.S_CLASSROOM_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message,
                                        *color_values)

        elif payload["text"] == "–£—á–∞—Å—Ç–Ω–∏–∫–∏":
            role_id = self.role_db.get_customizing_role_id(user_id)
            members_role_properties_dictionary = self.role_db.get_members_role_properties_dict(role_id)
            color_values = self.get_edit_role_keyboard_color_values(members_role_properties_dictionary)

            trans_message = "–ß—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Ç–Ω–∏–∫–∞–º–∏:"
            await self.state_transition(user_id, States.S_MEMBERS_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message,
                                        *color_values)

        elif payload["text"] == "–î–Ω–µ–≤–Ω–∏–∫":
            role_id = self.role_db.get_customizing_role_id(user_id)
            diary_role_properties_dictionary = self.role_db.get_diary_role_properties_dict(role_id)
            color_values = self.get_edit_role_keyboard_color_values(diary_role_properties_dictionary)

            trans_message = "–ß—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º:"
            await self.state_transition(user_id, States.S_DIARY_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message,
                                        *color_values)

        elif payload["text"] == "–°–º–µ–Ω–∏—Ç—å –∏–º—è":
            trans_message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–æ–ª–∏ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤):"
            await self.state_transition(user_id, States.S_ENTER_NAME_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            ask_message = "–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ:"

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            all_role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            admin_role_name = self.role_db.get_admin_role_name(classroom_id)
            default_role_name = self.role_db.get_default_role_name(classroom_id)
            all_role_names_text = self.get_all_role_names_text(all_role_names, admin_role_name, default_role_name)
            self.role_db.update_user_customize_role_id(user_id, None)

            trans_message = f"{all_role_names_text}\n\n{ask_message}"
            await self.state_transition(user_id, States.S_CHOOSE_ROLE_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_enter_name_edit_role_members_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_NAME_EDIT_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            if len(message) <= 20:
                role_id = self.role_db.get_customizing_role_id(user_id)
                self.role_db.update_role_name(role_id, message)

                role_properties_dict = self.role_db.get_role_properties_dict(role_id)
                role_properties_text = self.get_role_properties_text(role_properties_dict)

                trans_message = f"{role_properties_text}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!"
                await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)
            else:
                trans_message = "–î–ª–∏–Ω–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 —Å–∏–º–≤–æ–ª–æ–≤\n\n" \
                                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–æ–ª–∏ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤):"
                await self.state_transition(user_id, States.S_ENTER_NAME_EDIT_ROLE_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            role_id = self.role_db.get_customizing_role_id(user_id)
            role_properties_dict = self.role_db.get_role_properties_dict(role_id)
            role_properties_text = self.get_role_properties_text(role_properties_dict)

            await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS, role_properties_text)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_diary_privilege_edit_role_members_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_DIARY_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            role_id = self.role_db.get_customizing_role_id(user_id)
            diary_role_properties_dictionary = self.role_db.get_diary_role_properties_dict(role_id)
            color_values = self.get_edit_role_keyboard_color_values(diary_role_properties_dictionary)

            await self.state_transition(user_id, States.S_DIARY_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", *color_values)

        elif payload["text"] in ["–¢–µ–∫—É—â–µ–µ –¥–∑", "–ë—É–¥—É—â–µ–µ –¥–∑",
                                 "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ë—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]:
            payload_meaning_dictionary = {
                "–¢–µ–∫—É—â–µ–µ –¥–∑": "change_current_homework",
                "–ë—É–¥—É—â–µ–µ –¥–∑": "change_next_homework",
                "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "change_standard_week",
                "–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "change_current_week",
                "–ë—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "change_next_week",
            }
            privilege_type = payload_meaning_dictionary[payload["text"]]

            role_id = self.role_db.get_customizing_role_id(user_id)
            diary_role_properties_dictionary = self.role_db.get_diary_role_properties_dict(role_id)
            new_value = False if diary_role_properties_dictionary[privilege_type] else True

            self.role_db.update_role_privilege(role_id, new_value, privilege_type)
            diary_role_properties_dictionary[privilege_type] = new_value

            diary_role_properties_text = self.get_role_properties_text(diary_role_properties_dictionary, "diary")
            color_values = self.get_edit_role_keyboard_color_values(diary_role_properties_dictionary)

            await self.state_transition(user_id, States.S_DIARY_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS,
                                        diary_role_properties_text, *color_values)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            role_id = self.role_db.get_customizing_role_id(user_id)
            role_properties_dict = self.role_db.get_role_properties_dict(role_id)
            role_properties_text = self.get_role_properties_text(role_properties_dict)

            await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS, role_properties_text)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_members_privilege_edit_role_members_settings(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MEMBERS_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            role_id = self.role_db.get_customizing_role_id(user_id)
            members_role_properties_dictionary = self.role_db.get_members_role_properties_dict(role_id)
            color_values = self.get_edit_role_keyboard_color_values(members_role_properties_dictionary)

            await self.state_transition(user_id, States.S_MEMBERS_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", *color_values)

        elif payload["text"] in ["–ö–∏–∫–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å",
                                 "–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"]:
            payload_meaning_dictionary = {
                "–ö–∏–∫–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": "kick_members",
                "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å": "invite_members",
                "–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫": "accept_requests",
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": "notify",
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π": "redact_events"
            }
            privilege_type = payload_meaning_dictionary[payload["text"]]

            role_id = self.role_db.get_customizing_role_id(user_id)
            members_role_properties_dictionary = self.role_db.get_members_role_properties_dict(role_id)
            new_value = False if members_role_properties_dictionary[privilege_type] else True

            self.role_db.update_role_privilege(role_id, new_value, privilege_type)
            members_role_properties_dictionary[privilege_type] = new_value

            role_properties_dict = self.role_db.get_role_properties_dict(role_id)
            role_properties_text = self.get_role_properties_text(role_properties_dict)
            color_values = self.get_edit_role_keyboard_color_values(members_role_properties_dictionary)

            await self.state_transition(user_id, States.S_MEMBERS_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS,
                                        role_properties_text, *color_values)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            role_id = self.role_db.get_customizing_role_id(user_id)
            role_properties_dict = self.role_db.get_role_properties_dict(role_id)
            role_properties_text = self.get_role_properties_text(role_properties_dict)

            await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS, role_properties_text)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    async def s_classroom_privilege_edit_role_members_settings(self, user_id: int, payload: dict) -> None:
        """Handling States.S_CLASSROOM_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS"""
        if payload is None:
            role_id = self.role_db.get_customizing_role_id(user_id)
            classroom_role_properties_dictionary = self.role_db.get_classroom_role_properties_dict(role_id)
            color_values = self.get_edit_role_keyboard_color_values(classroom_role_properties_dictionary)

            await self.state_transition(user_id, States.S_CLASSROOM_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS,
                                        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", *color_values)

        elif payload["text"] in ["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã", "–¢–∏–ø –∫–ª–∞—Å—Å–∞",
                                 "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞", "–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"]:
            payload_meaning_dictionary = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞": "change_classroom_name",
                "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã": "change_school_name",
                "–¢–∏–ø –∫–ª–∞—Å—Å–∞": "change_classroom_access",
                "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞": "change_description",
                "–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": "change_members_limit"
            }
            privilege_type = payload_meaning_dictionary[payload["text"]]

            role_id = self.role_db.get_customizing_role_id(user_id)
            classroom_role_properties_dictionary = self.role_db.get_classroom_role_properties_dict(role_id)
            new_value = False if classroom_role_properties_dictionary[privilege_type] else True

            self.role_db.update_role_privilege(role_id, new_value, privilege_type)
            classroom_role_properties_dictionary[privilege_type] = new_value

            role_properties_dict = self.role_db.get_role_properties_dict(role_id)
            role_properties_text = self.get_role_properties_text(role_properties_dict)
            color_values = self.get_edit_role_keyboard_color_values(classroom_role_properties_dictionary)

            await self.state_transition(user_id, States.S_CLASSROOM_PRIVILEGE_EDIT_ROLE_MEMBERS_SETTINGS,
                                        role_properties_text, *color_values)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            role_id = self.role_db.get_customizing_role_id(user_id)
            role_properties_dict = self.role_db.get_role_properties_dict(role_id)
            role_properties_text = self.get_role_properties_text(role_properties_dict)

            await self.state_transition(user_id, States.S_EDIT_ROLE_MEMBERS_SETTINGS, role_properties_text)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.trans_to_main_menu(user_id)

    @staticmethod
    def get_edit_role_keyboard_color_values(role_properties_dictionary: dict) -> list:
        """Returns keyboard_colors"""
        value_meaning_dict = {
            1: "positive",
            0: "negative"
        }
        return list(map(lambda value: value_meaning_dict[value], list(role_properties_dictionary.values())[:-3]))

    @staticmethod
    def get_role_properties_text(role_properties_dict: dict, role_properties_type=None) -> str:
        """Returns role_properties_text"""
        value_meaning_dict = {
            1: "‚úÖ",
            0: "‚ùå"
        }
        role_properties_dict = role_properties_dict.copy()

        is_admin = role_properties_dict.pop("is_admin")
        is_default_member = role_properties_dict.pop("is_default_member")
        role_name = role_properties_dict.pop("role_name")

        if is_admin:
            role_name += " (–ê–¥–º–∏–Ω)"
        elif is_default_member:
            role_name += " (–î–µ—Ñ–æ–ª—Ç)"

        diary_role_properties_text = "–î–Ω–µ–≤–Ω–∏–∫:\n" \
                                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∑ {}\n" \
                                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –¥–∑ {}\n" \
                                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {}\n" \
                                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {}\n" \
                                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {}\n\n" \

        members_role_properties_text = "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" \
                                       "–ö–∏–∫–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {}\n" \
                                       "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å {}\n" \
                                       "–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ {}\n" \
                                       "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {}\n" \
                                       "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π {}\n\n"

        classroom_role_properties_text = "–ö–ª–∞—Å—Å:\n" \
                                         "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ {}\n" \
                                         "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∫–æ–ª—ã {}\n" \
                                         "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∞—Å—Å–∞ {}\n" \
                                         "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ {}\n" \
                                         "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {}"

        if role_properties_type == "diary":
            role_properties_text = "–†–æ–ª—å: {}\n\n" \
                                   f"{diary_role_properties_text}"
        elif role_properties_type == "members":
            role_properties_text = "–†–æ–ª—å: {}\n\n" \
                                   f"{members_role_properties_text}"
        elif role_properties_type == "classroom":
            role_properties_text = "–†–æ–ª—å: {}\n\n" \
                                   f"{classroom_role_properties_text}"
        else:
            role_properties_text = "–†–æ–ª—å: {}\n\n" \
                                   f"{diary_role_properties_text}" \
                                   f"{members_role_properties_text}" \
                                   f"{classroom_role_properties_text}"

        return role_properties_text.format(role_name,
                                           *map(lambda value: value_meaning_dict[value], role_properties_dict.values()))
