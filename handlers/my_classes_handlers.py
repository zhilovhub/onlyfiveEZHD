from supporting_functions import *


class MyClassesHandlers(SupportingFunctions):
    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id, user_db=user_db, classroom_db=classroom_db,
                         technical_support_db=technical_support_db, diary_homework_db=diary_homework_db,
                         role_db=role_db)

    def s_in_class_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_IN_CLASS_MYCLASSES"""
        if payload is None:
            self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                                  sign=self.get_sign(user_id))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.trans_to_main_menu(user_id)

        elif payload["text"] == "–ï—â—ë":
            trans_message = "–î—Ä—É–≥–æ–µ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞"
            self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES2, trans_message, sign=self.get_sign(user_id))

        elif payload["text"] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            trans_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–æ–ª–∏ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ!"
            self.state_transition(user_id, States.S_CLASSROOM_SETTINGS, trans_message)

        elif payload["text"] == "–£—á–∞—Å—Ç–Ω–∏–∫–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
            members_text = self.get_members_text(roles_dictionary)

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                         payload={
                                             "text": "enter_members_settings",
                                             "classroom_id": classroom_id
                                         })

            self.send_message(user_id, members_text, keyboard.get_keyboard())

        elif payload["text"] in ["–î–∑ —Ç–µ–∫—É—â–µ–µ", "–î–∑ –±—É–¥—É—â–µ–µ"]:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

            role_id = self.role_db.get_role_id_by_user_id(user_id, classroom_id)
            diary_role_properties_dictionary = self.role_db.get_diary_role_properties_dict(role_id)
            change_current_homework = diary_role_properties_dictionary["change_current_homework"]
            change_next_homework = diary_role_properties_dictionary["change_next_homework"]

            payload_meanings_dict = {
                "–î–∑ —Ç–µ–∫—É—â–µ–µ": ("edit_current_homework", "current", "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n\n",
                               change_current_homework),
                "–î–∑ –±—É–¥—É—â–µ–µ": ("edit_next_homework", "next", "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n\n",
                               change_next_homework)
            }
            callback_payload_text = payload_meanings_dict[payload["text"]][0]
            week_type = payload_meanings_dict[payload["text"]][1]
            help_text = payload_meanings_dict[payload["text"]][2]
            can = payload_meanings_dict[payload["text"]][3]

            formatted_week_lessons_diary = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id,
                                                                                                 week_type)
            formatted_week_lessons_homework = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id,
                                                                                                    week_type,
                                                                                                    homework=True)
            diary_homework_text = self.get_week_diary_text(formatted_week_lessons_diary,
                                                           formatted_week_lessons_homework)

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ò–∑–º–µ–Ω–∏—Ç—å" if can else "–ò–∑–º–µ–Ω–∏—Ç—å‚ùå",
                                         payload={
                                             "text": callback_payload_text,
                                             "classroom_id": classroom_id,
                                             "can": can
                                         })

            self.send_message(user_id, help_text + diary_homework_text, keyboard.get_keyboard())

        elif payload["text"] in ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–µ–µ"]:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

            role_id = self.role_db.get_role_id_by_user_id(user_id, classroom_id)
            diary_role_properties_dictionary = self.role_db.get_diary_role_properties_dict(role_id)
            change_standard_week = diary_role_properties_dictionary["change_standard_week"]
            change_current_week = diary_role_properties_dictionary["change_current_week"]
            change_next_week = diary_role_properties_dictionary["change_next_week"]

            payload_meanings_dict = {
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ": ("edit_standard", "standard", "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n–ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ "
                                                                      "—Ç–µ–∫—É—â–µ–µ –∏ –±—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n–ë—É–¥–µ—Ç "
                                                                      "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–µ "
                                                                      "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n\n",
                                         change_standard_week),
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ": ("edit_current", "current", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n\n",
                                       change_current_week),
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–µ–µ": ("edit_next", "next", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n\n",
                                       change_next_week)
            }
            callback_payload_text = payload_meanings_dict[payload["text"]][0]
            week_type = payload_meanings_dict[payload["text"]][1]
            help_text = payload_meanings_dict[payload["text"]][2]
            can = payload_meanings_dict[payload["text"]][3]

            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ò–∑–º–µ–Ω–∏—Ç—å" if can else "–ò–∑–º–µ–Ω–∏—Ç—å‚ùå",
                                         payload={
                                             "text": callback_payload_text,
                                             "classroom_id": classroom_id,
                                             "can": can
                                         })

            self.send_message(user_id, help_text + diary_text, keyboard.get_keyboard())

        elif payload["text"] in ("edit_standard", "edit_current", "edit_next",
                                 "edit_current_homework", "edit_next_homework"):
            if payload["can"]:
                payload_meanings_dict = {
                    "edit_standard": ("standard", "—ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", States.S_EDIT_WEEK_MYCLASSES),
                    "edit_current": ("current", "—Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", States.S_EDIT_WEEK_MYCLASSES),
                    "edit_next": ("next", "–±—É–¥—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", States.S_EDIT_WEEK_MYCLASSES),
                    "edit_current_homework": ("current", "–¥–∑ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏", States.S_EDIT_HOMEWORK_MYCLASSES),
                    "edit_next_homework": ("next", "–¥–∑ –±—É–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏", States.S_EDIT_HOMEWORK_MYCLASSES),
                }
                week_type = payload_meanings_dict[payload["text"]][0]
                russian_comments = payload_meanings_dict[payload["text"]][1]
                next_state = payload_meanings_dict[payload["text"]][2]

                self.diary_homework_db.insert_row_into_temp_weekday_table(user_id, week_type)

                trans_message = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {russian_comments}\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–∏–¥—è—Ç –í–°–ï —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞—Å—Å–∞!"
                self.state_transition(user_id, next_state, trans_message, week_type=week_type)
            else:
                self.send_message(user_id, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑-–∑–∞ —Å–≤–æ–µ–π —Ä–æ–ª–∏")

        elif payload["text"] == "enter_members_settings":
            trans_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞\n\n" \
                            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–æ–ª–∏, —É–¥–∞–ª—è—Ç—å –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
            self.state_transition(user_id, States.S_MEMBERS_SETTINGS, trans_message)

        elif payload["text"] == "accept_request":
            classroom_id = payload["classroom_id"]
            members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)
            members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)

            request_user_id = payload["user_id"]
            first_name, last_name = self.user_db.get_user_first_and_last_name(request_user_id)

            if request_user_id in members_dictionary.keys():
                self.classroom_db.delete_request(request_user_id, classroom_id)

                self.s_in_class_my_classes2_handler(user_id, {"text": "–ó–∞—è–≤–∫–∏"},
                                                    info_message=f"[id{request_user_id}|{first_name} {last_name}] —É–∂–µ "
                                                                 f"–≤ –∫–ª–∞—Å—Å–µ!")
            elif len(members_dictionary) < members_limit:
                default_role_id = self.role_db.get_default_role_id(classroom_id)
                self.classroom_db.insert_new_user_in_classroom(request_user_id, classroom_id, default_role_id)
                self.classroom_db.delete_request(request_user_id, classroom_id)

                self.s_in_class_my_classes2_handler(user_id, {"text": "–ó–∞—è–≤–∫–∏"},
                                                    info_message=f"[id{request_user_id}|{first_name} {last_name}]"
                                                                 f" –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞—Å—Å")
            else:
                self.send_message(user_id, f"–í –∫–ª–∞—Å—Å–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π! ({len(members_dictionary)}"
                                           f"/{members_limit})")

        elif payload["text"] == "cancel_request":
            classroom_id = payload["classroom_id"]
            members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)

            request_user_id = payload["user_id"]

            self.classroom_db.delete_request(request_user_id, classroom_id)
            first_name, last_name = self.user_db.get_user_first_and_last_name(request_user_id)

            if request_user_id in members_dictionary.keys():
                self.s_in_class_my_classes2_handler(user_id, {"text": "–ó–∞—è–≤–∫–∏"},
                                                    info_message=f"[id{request_user_id}|{first_name} {last_name}] —É–∂–µ "
                                                                 f"–≤ –∫–ª–∞—Å—Å–µ!")
            else:
                self.s_in_class_my_classes2_handler(user_id, {"text": "–ó–∞—è–≤–∫–∏"},
                                                    info_message=f"–ó–∞—è–≤–∫–∞ [id{request_user_id}|{first_name} "
                                                                 f"{last_name}] –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    def s_in_class_my_classes2_handler(self, user_id: int, payload: dict, info_message="") -> None:
        """Handling States.S_IN_CLASS_MYCLASSES2"""
        if payload is None:
            self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES2, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                                  sign=self.get_sign(user_id))

        elif payload["text"] == "–ó–∞—è–≤–∫–∏":
            if payload["can"]:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                request_list = self.classroom_db.get_list_of_request_information(classroom_id)

                if not request_list:
                    trans_message = info_message + "\n\n–ó–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç"
                    self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES2, trans_message,
                                          sign=self.get_sign(user_id))
                else:
                    elements = []
                    for request in request_list:
                        request_user_id = request["user_id"]
                        request_classroom_id = request["classroom_id"]
                        request_text = request["request_text"]
                        request_datetime = request["datetime"]

                        first_name, last_name = self.user_db.get_user_first_and_last_name(request_user_id)

                        buttons = [
                            {
                                "action": {
                                    "type": "callback",
                                    "label": "–ü—Ä–∏–Ω—è—Ç—å",
                                    "payload": {
                                        "text": "accept_request",
                                        "user_id": request_user_id,
                                        "classroom_id": request_classroom_id
                                    }
                                },
                                "color": "positive"
                            },
                            {
                                "action": {
                                    "type": "callback",
                                    "label": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                    "payload": {
                                        "text": "cancel_request",
                                        "user_id": request_user_id,
                                        "classroom_id": request_classroom_id
                                    }
                                },
                                "color": "negative"
                            }
                        ]

                        elements.append(
                            {
                                "title": f"{first_name} {last_name}",
                                "description": f"{request_text}\n{request_datetime}",
                                "buttons": buttons
                            }
                        )

                    trans_message = info_message if info_message else "–ó–∞—è–≤–∫–∏ –≤ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å"
                    self.send_message(user_id, trans_message, template=dumps({
                        "type": "carousel",
                        "elements": elements
                    }))
            else:
                self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES2, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫—É –∏–∑-–∑–∞ "
                                                                             "—Å–≤–æ–µ–π —Ä–æ–ª–∏", sign=False)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            trans_message = "–ù–∞–∑–∞–¥..."
            self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES, trans_message, sign=self.get_sign(user_id))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.trans_to_main_menu(user_id)

    def s_edit_week_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_WEEK_MYCLASSES"""
        if payload is None:
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            self.state_transition(user_id, States.S_EDIT_WEEK_MYCLASSES, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                                  week_type=week_type)

        elif payload["text"] in ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]:
            weekday_meanings_dict = {
                "–ü–ù": "monday",
                "–í–¢": "tuesday",
                "–°–†": "wednesday",
                "–ß–¢": "thursday",
                "–ü–¢": "friday",
                "–°–ë": "saturday",
                "–í–°": "sunday"
            }
            english_weekday = weekday_meanings_dict[payload["text"]]

            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id, week_type,
                                                                                         english_weekday)

            self.diary_homework_db.update_all_lessons_in_temp_weekday_table(user_id, english_weekday,
                                                                            formatted_day_lessons)

            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, english_weekday)
            self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, weekday_diary_text)

        elif payload["text"] == "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, "standard")
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_copy_diary_from_week_into_another_week(classroom_id, week_type,
                                                                                 formatted_week_lessons)

            new_formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)

            week_diary_text = self.get_week_diary_text(new_formatted_week_lessons)
            self.state_transition(user_id, States.S_EDIT_WEEK_MYCLASSES, week_diary_text, week_type=week_type)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.trans_to_main_menu(user_id)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)

            trans_message = "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞"
            self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES, trans_message, sign=self.get_sign(user_id))

    def s_edit_weekday_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_WEEKDAY_MYCLASSES"""
        if payload is None:
            self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

            if all(formatted_day_lessons):
                trans_message = f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (12) —É—Ä–æ–∫–æ–≤ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n{weekday_diary_text}"
                self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, trans_message)
            else:
                new_lesson_index = formatted_day_lessons.index(None) + 1

                trans_message = f"{weekday_diary_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index}-–≥–æ —É—Ä–æ–∫–∞" \
                                f" (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):"
                self.state_transition(user_id, States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

            if not any(formatted_day_lessons):
                trans_message = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n{weekday_diary_text}"
                self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, trans_message)
            else:
                trans_message = f"{weekday_diary_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ " \
                                f"—Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,\n7. –ê–ª–≥–µ–±—Ä–∞)"
                self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

                trans_message = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–µ\n\n{weekday_diary_text}"
            else:
                last_lesson_index = formatted_day_lessons.index(None) if None in formatted_day_lessons else 12
                deleted_lesson = formatted_day_lessons[last_lesson_index - 1]
                self.diary_homework_db.update_delete_lesson_from_temp_table(user_id, last_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                trans_message = f"–£–¥–∞–ª—ë–Ω {last_lesson_index}. {deleted_lesson}\n\n{weekday_diary_text}"

            self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

                trans_message = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–µ\n\n{weekday_diary_text}"
                self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, trans_message)
            else:
                self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                trans_message = f"–í—Å–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã!\n\n{weekday_diary_text}"
                self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"] == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_weekday_in_week(classroom_id, formatted_day_lessons, week_type, weekday)
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)

            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            trans_message = f"{diary_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            self.state_transition(user_id, States.S_EDIT_WEEK_MYCLASSES, trans_message, week_type=week_type)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.trans_to_main_menu(user_id)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)

            trans_message = f"{diary_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!"
            self.state_transition(user_id, States.S_EDIT_WEEK_MYCLASSES, trans_message, week_type=week_type)

    def s_add_new_lesson_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES"""
        if payload is None:
            if len(message) > 70:
                trans_message = "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 70 —Å–∏–º–≤–æ–ª–æ–≤!"
                self.state_transition(user_id, States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES, trans_message)
            else:
                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                new_lesson_index = formatted_day_lessons.index(None) + 1
                self.diary_homework_db.update_add_new_lesson_into_temp_table(user_id, message, new_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                new_weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                if new_lesson_index <= 11:
                    trans_message = f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}\n\n" \
                                    f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index + 1}-–≥–æ —É—Ä–æ–∫–∞ (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):"
                    self.state_transition(user_id, States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES, trans_message)
                else:
                    trans_message = f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}.\n\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç!"
                    self.state_transition(user_id, States.S_EDIT_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å":
            trans_message = "–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤"
            self.state_transition(user_id, States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"]:
            self.s_edit_weekday_my_classes_handler(user_id, payload)

    def s_edit_lesson_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_EDIT_LESSON_WEEKDAY_MYCLASSES"""
        if payload is None:
            ask_message = "–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: " \
                          "–Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,\n7. –ê–ª–≥–µ–±—Ä–∞)"

            if ". " in message:
                lesson_index, lesson_name = message.split(". ", 1)

                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                max_lesson_index = formatted_day_lessons.index(None) if None in formatted_day_lessons else 12

                if lesson_index.isdigit():
                    if 0 < int(lesson_index) <= max_lesson_index:
                        if 0 < len(lesson_name) <= 70:
                            self.diary_homework_db.update_lesson_in_temp_table(user_id, lesson_name, lesson_index)

                            new_formatted_day_lessons = \
                                self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                            weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                            trans_message = f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n{weekday_diary_text}\n\n{ask_message}"
                            self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)
                        else:
                            trans_message = f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ " \
                                            f"70 —Å–∏–º–≤–æ–ª–æ–≤\n\n{ask_message}"
                            self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)
                    else:
                        trans_message = f"–£—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç.\n\n{ask_message}"
                        self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)
                else:
                    trans_message = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}"
                    self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)
            else:
                trans_message = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}"
                self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å":
            trans_message = "–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤"
            self.state_transition(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES, trans_message)

        elif payload["text"]:
            self.s_edit_weekday_my_classes_handler(user_id, payload)

    def s_edit_homework_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_HOMEWORK_MYCLASSES"""
        if payload is None:
            self.state_transition(user_id, States.S_EDIT_HOMEWORK_MYCLASSES, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª")

        elif payload["text"] in ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]:
            weekday_meanings_dict = {
                "–ü–ù": "monday",
                "–í–¢": "tuesday",
                "–°–†": "wednesday",
                "–ß–¢": "thursday",
                "–ü–¢": "friday",
                "–°–ë": "saturday",
                "–í–°": "sunday"
            }
            english_weekday = weekday_meanings_dict[payload["text"]]

            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons_diary = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id,
                                                                                               week_type,
                                                                                               english_weekday)
            if any(formatted_day_lessons_diary):
                formatted_day_lessons_homework = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id,
                                                                                                      week_type,
                                                                                                      english_weekday,
                                                                                                      homework=True)
                self.diary_homework_db.update_all_lessons_in_temp_weekday_table(user_id, english_weekday,
                                                                                formatted_day_lessons_homework)
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons_diary, english_weekday,
                                                                 formatted_day_lessons_homework)

                help_text = "\n\n–í–ø–∏—à–∏ –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –¥–∑\n(–ù–∞–ø—Ä–∏–º–µ—Ä,\n2. " \
                            "–£–ø—Ä 23, —Å—Ç—Ä 6)\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–∑ —Å —É—Ä–æ–∫–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞"
                self.state_transition(user_id, States.S_EDIT_HOMEWORK_WEEKDAY_MYCLASSES,
                                      weekday_diary_text + help_text)
            else:
                trans_message = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—É—Å—Ç–æ–µ (—Å–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)"
                self.state_transition(user_id, States.S_EDIT_HOMEWORK_MYCLASSES, trans_message)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)

            trans_message = "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞"
            self.state_transition(user_id, States.S_IN_CLASS_MYCLASSES, trans_message, sign=self.get_sign(user_id))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.trans_to_main_menu(user_id)

    def s_edit_homework_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_EDIT_HOMEWORK_WEEKDAY_MYCLASSES"""
        ask_message = "\n\n–í–ø–∏—à–∏ –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –¥–∑\n(–ù–∞–ø—Ä–∏–º–µ—Ä,\n2. –£–ø—Ä 23, —Å—Ç—Ä 6)" \
                      "\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–∑ —Å —É—Ä–æ–∫–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞"

        if payload is None:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            formatted_day_lessons_diary = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id,
                                                                                               week_type,
                                                                                               weekday)
            if message.isdigit():
                lesson_index = int(message)

                max_lessons_index = formatted_day_lessons_diary.index(None) \
                    if None in formatted_day_lessons_diary else 12

                if 0 < lesson_index <= max_lessons_index:
                    self.diary_homework_db.update_lesson_in_temp_table(user_id, "", lesson_index)
                    formatted_day_lessons_homework = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)

                    weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons_diary, weekday,
                                                                     formatted_day_lessons_homework)
                    self.state_transition(user_id, States.S_EDIT_HOMEWORK_WEEKDAY_MYCLASSES, f"–î–∑ —Å {lesson_index}-–≥–æ "
                                                                                             f"—É—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–æ!\n\n"
                                                                                             f"{weekday_diary_text}\n\n"
                                                                                             f"{ask_message}")
                else:
                    trans_message = f"–£—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç\n\n{ask_message}"
                    self.state_transition(user_id, States.S_EDIT_HOMEWORK_WEEKDAY_MYCLASSES, trans_message)
            elif ". " in message:
                pass
            else:
                self.state_transition(user_id, States.S_EDIT_HOMEWORK_WEEKDAY_MYCLASSES, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n"
                                                                                         f"{ask_message}")

        elif payload["text"] == "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –¥–∑":
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            formatted_day_lessons_diary = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id,
                                                                                               week_type,
                                                                                               weekday)
            formatted_day_lessons_homework = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)

            dairy_homework_text = self.get_weekday_diary_text(formatted_day_lessons_diary, weekday,
                                                              formatted_day_lessons_homework)
            self.state_transition(user_id, States.S_EDIT_HOMEWORK_WEEKDAY_MYCLASSES, f"–í—Å—ë –¥–∑ —Å —ç—Ç–æ–≥–æ –¥–Ω—è —É–¥–∞–ª–µ–Ω–æ!\n\n"
                                                                                     f"{dairy_homework_text}\n\n"
                                                                                     f"{ask_message}")

        elif payload["text"] == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons_homework = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_weekday_in_week(classroom_id, formatted_day_lessons_homework, week_type,
                                                          weekday, homework=True)
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)

            formatted_week_lessons_diary = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id,
                                                                                                 week_type)
            formatted_week_lessons_homework = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id,
                                                                                                    week_type,
                                                                                                    homework=True)
            diary_homework_text = self.get_week_diary_text(formatted_week_lessons_diary,
                                                           formatted_week_lessons_homework)

            trans_message = f"{diary_homework_text}\n\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!"
            self.state_transition(user_id, States.S_EDIT_HOMEWORK_MYCLASSES, trans_message)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons_diary = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id,
                                                                                                 week_type)
            formatted_week_lessons_homework = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id,
                                                                                                    week_type,
                                                                                                    homework=True)
            diary_homework_text = self.get_week_diary_text(formatted_week_lessons_diary,
                                                           formatted_week_lessons_homework)

            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)

            trans_message = f"{diary_homework_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!"
            self.state_transition(user_id, States.S_EDIT_HOMEWORK_MYCLASSES, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.trans_to_main_menu(user_id)

    @staticmethod
    def get_week_diary_text(formatted_week_lessons_diary: list, formatted_week_lessons_homework=None) -> str:
        """Returns text of week's diary"""
        week_diary = []

        weekdays = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–°–£–ë–ë–û–¢–ê", "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"]

        if formatted_week_lessons_homework is None:
            for weekday_name, weekday_diary_tuple in zip(weekdays, formatted_week_lessons_diary):
                if not any(weekday_diary_tuple):
                    week_diary.append(weekday_name + "\n" + "1. –ü–£–°–¢–û")
                else:
                    if None in weekday_diary_tuple:
                        weekday_diary_tuple_without_empty = weekday_diary_tuple[:weekday_diary_tuple.index(None)]
                    else:
                        weekday_diary_tuple_without_empty = weekday_diary_tuple

                    day_lessons = [f"{i}. {weekday_diary_tuple_without_empty[i - 1]}"
                                   for i in range(1, len(weekday_diary_tuple_without_empty) + 1)]
                    week_diary.append(weekday_name + "\n" + "\n".join(day_lessons))
        else:
            for weekday_name, weekday_diary_tuple, weekday_homework_tuple in zip(weekdays, formatted_week_lessons_diary,
                                                                                 formatted_week_lessons_homework):
                if not any(weekday_diary_tuple):
                    week_diary.append(weekday_name + "\n" + "1. –ü–£–°–¢–û")
                else:
                    if None in weekday_diary_tuple:
                        weekday_diary_tuple_without_empty = weekday_diary_tuple[:weekday_diary_tuple.index(None)]
                    else:
                        weekday_diary_tuple_without_empty = weekday_diary_tuple

                    day_lessons = []
                    for i in range(1, len(weekday_diary_tuple_without_empty) + 1):
                        lesson_text = f"{i}. {weekday_diary_tuple_without_empty[i - 1]}"
                        if weekday_homework_tuple[i - 1] is not None:
                            lesson_text += f": {weekday_homework_tuple[i - 1]}"
                        day_lessons.append(lesson_text)

                    week_diary.append(weekday_name + "\n" + "\n".join(day_lessons))

        return "\n\n".join(week_diary)

    @staticmethod
    def get_weekday_diary_text(formatted_days_diary: tuple, weekday: str, formatted_days_homework=None) -> str:
        """Returns text of weekday's diary"""
        weekday_meanings_dict = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ"
        }
        weekday_russian = weekday_meanings_dict[weekday]

        if None in formatted_days_diary:
            weekday_without_empty = formatted_days_diary[:formatted_days_diary.index(None)]
        else:
            weekday_without_empty = formatted_days_diary

        if formatted_days_homework is None:
            if not any(formatted_days_diary):
                weekday_diary = ["1. –ü–£–°–¢–û"]
            else:
                weekday_diary = [f"{i}. {weekday_without_empty[i - 1]}"
                                 for i in range(1, len(weekday_without_empty) + 1)]
        else:
            weekday_diary = []
            for i in range(1, len(weekday_without_empty) + 1):
                lesson_text = f"{i}. {weekday_without_empty[i - 1]}"
                if formatted_days_homework[i - 1] is not None:
                    lesson_text += f": {formatted_days_homework[i - 1]}"
                weekday_diary.append(lesson_text)

        return weekday_russian + "\n" + "\n".join(weekday_diary)
