from supporting_functions import *


class MyClassesHandlers(SupportingFunctions):
    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id, user_db=user_db, classroom_db=classroom_db,
                         technical_support_db=technical_support_db, diary_homework_db=diary_homework_db,
                         role_db=role_db)

    def s_in_class_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_IN_CLASS_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("my_class_menu"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–ï—â—ë":
            self.send_message(user_id, "–î—Ä—É–≥–æ–µ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞", self.get_keyboard("my_class_menu2"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES2.value)

        elif payload["text"] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self.send_message(user_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–æ–ª–∏ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ!",
                              self.get_keyboard("classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–£—á–∞—Å—Ç–Ω–∏–∫–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
            members_text = self.get_members_text(roles_dictionary)

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                         payload={
                                             "text": "enter_members_settings",
                                             "classroom_id": classroom_id
                                         })

            self.send_message(user_id, members_text, keyboard.get_keyboard())

        elif payload["text"] in ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–µ–µ"]:
            payload_meanings_dict = {
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ": ("edit_standard", "standard", "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n–ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ "
                                                                      "—Ç–µ–∫—É—â–µ–µ –∏ –±—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n–ë—É–¥–µ—Ç "
                                                                      "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–µ "
                                                                      "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n\n"),
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ": ("edit_current", "current", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n\n"),
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–µ–µ": ("edit_next", "next", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n\n")
            }
            callback_payload_text = payload_meanings_dict[payload["text"]][0]
            week_type = payload_meanings_dict[payload["text"]][1]
            help_text = payload_meanings_dict[payload["text"]][2]

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ò–∑–º–µ–Ω–∏—Ç—å",
                                         payload={
                                             "text": callback_payload_text,
                                             "classroom_id": classroom_id
                                         })

            self.send_message(user_id, help_text + diary_text, keyboard.get_keyboard())

        elif payload["text"] in ("edit_standard", "edit_current", "edit_next"):
            payload_meanings_dict = {
                "edit_standard": ("standard", "—ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ"),
                "edit_current": ("current", "—Ç–µ–∫—É—â–µ–≥–æ"),
                "edit_next": ("next", "–±—É–¥—É—â–µ–≥–æ")
            }
            week_type = payload_meanings_dict[payload["text"]][0]
            week_type_russian = payload_meanings_dict[payload["text"]][1]

            self.diary_homework_db.insert_row_into_temp_weekday_table(user_id, week_type)
            self.send_message(user_id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {week_type_russian} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è "
                                       f"—É–≤–∏–¥—è—Ç –í–°–ï —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞—Å—Å–∞!",
                              self.get_keyboard(f"edit_{week_type}_week"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEK_MYCLASSES.value)

        elif payload["text"] == "enter_members_settings":
            self.send_message(user_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞\n\n"
                                       "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–æ–ª–∏, —É–¥–∞–ª—è—Ç—å –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
                              self.get_keyboard("members_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MEMBERS_SETTINGS.value)

    def s_in_class_my_classes2_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_IN_CLASS_MYCLASSES2"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("my_class_menu2"))

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–ù–∞–∑–∞–¥...", self.get_keyboard("my_class_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_edit_week_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_WEEK_MYCLASSES"""
        if payload is None:
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard(f"edit_{week_type}_week"))

        elif payload["text"] in ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]:
            weekday_meanings_dict = {
                "–ü–ù": "monday",
                "–í–¢": "tuesday",
                "–°–†": "wednesday",
                "–ß–¢": "thursday",
                "–ü–¢": "friday",
                "–°–ë": "saturday",
                "–í–°": "sunday"
            }
            english_weekday = weekday_meanings_dict[payload["text"]]

            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id, week_type,
                                                                                         english_weekday)

            if None in formatted_day_lessons:
                formatted_day_lessons = formatted_day_lessons[:formatted_day_lessons.index(None)]

            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, english_weekday)

            self.diary_homework_db.update_all_lessons_in_temp_weekday_table(user_id, english_weekday,
                                                                            formatted_day_lessons)
            self.send_message(user_id, weekday_diary_text, self.get_keyboard(f"edit_weekday_default"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, "standard")
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_copy_diary_from_week_into_another_week(classroom_id, week_type,
                                                                                 formatted_week_lessons)

            new_formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            week_diary_text = self.get_week_diary_text(new_formatted_week_lessons)

            self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ!\n\n{week_diary_text}",
                              self.get_keyboard(f"edit_{week_type}_week"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞", self.get_keyboard("my_class_menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

    def s_edit_weekday_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_WEEKDAY_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("edit_weekday_default"))

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

            if all(formatted_day_lessons):
                self.send_message(user_id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (12) —É—Ä–æ–∫–æ–≤ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))
            else:
                new_lesson_index = formatted_day_lessons.index(None) + 1

                self.send_message(user_id, f"{weekday_diary_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index}-–≥–æ —É—Ä–æ–∫–∞"
                                           f" (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):",
                                  self.get_keyboard(f"edit_weekday_add"))
                self.user_db.set_user_dialog_state(user_id, States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

            if not any(formatted_day_lessons):
                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))
            else:
                self.send_message(user_id, f"{weekday_diary_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ "
                                           f"—Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,\n7. –ê–ª–≥–µ–±—Ä–∞)",
                                  self.get_keyboard(f"edit_weekday_redact"))
                self.user_db.set_user_dialog_state(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)
                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–µ\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

            else:
                last_lesson_index = formatted_day_lessons.index(None) if None in formatted_day_lessons else 12
                deleted_lesson = formatted_day_lessons[last_lesson_index - 1]
                self.diary_homework_db.update_delete_lesson_from_temp_table(user_id, last_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                self.send_message(user_id, f"–£–¥–∞–ª—ë–Ω {last_lesson_index}. {deleted_lesson}\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)
                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–µ\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

            else:
                self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                self.send_message(user_id, f"–í—Å–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã!\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

        elif payload["text"] == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_weekday_in_week(classroom_id, formatted_day_lessons, week_type, weekday)
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)

            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            self.send_message(user_id, f"{diary_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                              self.get_keyboard(f"edit_{week_type}_week"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEK_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            self.send_message(user_id, f"{diary_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!",
                              self.get_keyboard(f"edit_{week_type}_week"))
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEK_MYCLASSES.value)

    def s_add_new_lesson_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES"""
        if payload is None:
            if len(message) > 70:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 70 —Å–∏–º–≤–æ–ª–æ–≤!",
                                  self.get_keyboard("edit_weekday_add"))
            else:
                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                new_lesson_index = formatted_day_lessons.index(None) + 1
                self.diary_homework_db.update_add_new_lesson_into_temp_table(user_id, message, new_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                new_weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                if new_lesson_index <= 11:
                    self.send_message(user_id, f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}\n\n"
                                               f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index + 1}-–≥–æ —É—Ä–æ–∫–∞ (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):",
                                      self.get_keyboard("edit_weekday_add"))
                else:
                    self.send_message(user_id, f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}.\n\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç!",
                                      self.get_keyboard(f"edit_weekday_default"))
                    self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å":
            self.send_message(user_id, "–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤",
                              self.get_keyboard(f"edit_weekday_add"))

        elif payload["text"]:
            self.s_edit_weekday_my_classes_handler(user_id, payload)

    def s_edit_lesson_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_EDIT_LESSON_WEEKDAY_MYCLASSES"""
        if payload is None:
            ask_message = "–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: " \
                          "–Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,\n7. –ê–ª–≥–µ–±—Ä–∞)"

            if ". " in message:
                lesson_index, lesson_name = message.split(". ")

                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                max_lesson_index = formatted_day_lessons.index(None) if None in formatted_day_lessons else 12

                if lesson_index.isdigit():
                    if 0 < int(lesson_index) <= max_lesson_index:
                        if 0 < len(lesson_name) <= 70:
                            self.diary_homework_db.update_lesson_in_temp_table(user_id, lesson_name, lesson_index)

                            new_formatted_day_lessons = \
                                self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                            weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                            self.send_message(user_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n{weekday_diary_text}\n\n"
                                                       f"{ask_message}",
                                              self.get_keyboard("edit_weekday_redact"))
                        else:
                            self.send_message(user_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ "
                                                       f"70 —Å–∏–º–≤–æ–ª–æ–≤\n\n{ask_message}",
                                              self.get_keyboard("edit_weekday_redact"))
                    else:
                        self.send_message(user_id, f"–£—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç.\n\n{ask_message}",
                                          self.get_keyboard("edit_weekday_redact"))
                else:
                    self.send_message(user_id,
                                      f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}",
                                      self.get_keyboard("edit_weekday_redact"))
            else:
                self.send_message(user_id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}",
                                  self.get_keyboard("edit_weekday_redact"))

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å":
            self.send_message(user_id, "–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤",
                              self.get_keyboard("edit_weekday_redact"))

        elif payload["text"]:
            self.s_edit_weekday_my_classes_handler(user_id, payload)

    @staticmethod
    def get_week_diary_text(formatted_week: list) -> str:
        """Returns text of week's diary"""
        week_diary = []

        weekdays = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        for weekday_name, weekday_tuple in zip(weekdays, formatted_week):
            if not any(weekday_tuple):
                week_diary.append(weekday_name + "\n" + "1. –ü–£–°–¢–û")
            else:
                if None in weekday_tuple:
                    weekday_tuple_without_empty = weekday_tuple[:weekday_tuple.index(None)]
                else:
                    weekday_tuple_without_empty = weekday_tuple

                day_lessons = [f"{i}. {weekday_tuple_without_empty[i - 1]}"
                               for i in range(1, len(weekday_tuple_without_empty) + 1)]
                week_diary.append(weekday_name + "\n" + "\n".join(day_lessons))

        return "\n\n".join(week_diary)

    @staticmethod
    def get_weekday_diary_text(formatted_days: tuple, weekday: str) -> str:
        """Returns text of weekday's diary"""
        weekday_meanings_dict = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ"
        }
        weekday_russian = weekday_meanings_dict[weekday]

        if not any(formatted_days):
            weekday_diary = ["1. –ü–£–°–¢–û"]
        else:
            if None in formatted_days:
                weekday_without_empty = formatted_days[:formatted_days.index(None)]
            else:
                weekday_without_empty = formatted_days
            weekday_diary = [f"{i}. {weekday_without_empty[i - 1]}" for i in range(1, len(weekday_without_empty) + 1)]

        return weekday_russian + "\n" + "\n".join(weekday_diary)
