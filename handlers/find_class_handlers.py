from supporting_functions import *
from states import States


class FindClassHandlers(SupportingFunctions):
    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id, user_db=user_db, classroom_db=classroom_db,
                         technical_support_db=technical_support_db, diary_homework_db=diary_homework_db,
                         role_db=role_db)

    def s_find_class_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_FIND_CLASS"""
        if payload is None:
            classroom_id = None
            stripped_message = message.strip()

            if fullmatch(r"#\d+", stripped_message):
                classroom_id = int(stripped_message[1:])

            elif search(r"onlyfiveEZHD/invite_link/\d+", stripped_message):
                result = search(r"onlyfiveEZHD/invite_link/\d+", stripped_message)
                classroom_id = int(stripped_message[result.start():result.end()].split("/")[-1])

            if classroom_id:
                existing_classroom_ids = self.classroom_db.get_list_of_classroom_ids()

                if classroom_id in existing_classroom_ids:
                    keyboard = VkKeyboard(inline=True)

                    classroom_name, school_name, access, description = \
                        self.classroom_db.get_information_of_classroom(classroom_id)
                    members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)
                    members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

                    for member_user_id in members_dictionary.keys():
                        if user_id == member_user_id:
                            keyboard.add_callback_button("–í–æ–π—Ç–∏", payload={
                                "text": "enter_the_classroom", "classroom_id": classroom_id
                            })
                            user_in_classroom_text = "–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ ‚úÖ"
                            break
                    else:
                        keyboard.add_callback_button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", payload={
                            "text": "look_at_the_classroom", "classroom_id": classroom_id
                        })
                        user_in_classroom_text = "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ ‚ùå"

                    self.send_message(user_id, f"#{classroom_id}\n"
                                               f"–ö–ª–∞—Å—Å: {classroom_name}\n"
                                               f"–®–∫–æ–ª–∞: {school_name}\n"
                                               f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                                               f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n"
                                               f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}/{members_limit}\n\n"
                                               f"{user_in_classroom_text}", keyboard.get_keyboard())
                else:
                    self.send_message(user_id, f"–ö–ª–∞—Å—Å–∞ —Å id {classroom_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                      self.get_keyboard("just_menu"))

            else:
                self.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ id –∫–ª–∞—Å—Å–∞ –≤ "
                                           "—Ñ–æ—Ä–º–∞—Ç–µ #id (–Ω–∞–ø—Ä–∏–º–µ—Ä, #1223)", self.get_keyboard("just_menu"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_look_classroom_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_LOOK_CLASSROOM"""
        classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
        keyboard_type = self.get_keyboard_type(user_id, classroom_id)

        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard(keyboard_type))

        elif payload["text"] == "–£—á–∞—Å—Ç–Ω–∏–∫–∏":
            roles_dictionary = self.classroom_db.get_dict_of_classroom_roles(classroom_id)
            members_text = self.get_members_text(roles_dictionary)

            self.send_message(user_id, f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n{members_text}",
                              self.get_keyboard(keyboard_type))

        elif payload["text"] == "–í–æ–π—Ç–∏":
            limit_members = self.classroom_db.get_classroom_members_limit(classroom_id)
            members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)

            if len(members_dictionary) < limit_members:
                default_role_id = self.role_db.get_default_role_id(classroom_id)
                self.classroom_db.insert_new_user_in_classroom(user_id, classroom_id, default_role_id)

                self.send_message(user_id, "–¢—ã –≤—Å—Ç—É–ø–∏–ª!", self.get_keyboard("my_class_menu"))
                self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)
            else:
                self.send_message(user_id, "–í –∫–ª–∞—Å—Å–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π!",
                                  self.get_keyboard(keyboard_type))

        elif payload["text"] == "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
            self.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –∑–∞—è–≤–∫–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)",
                              self.get_keyboard("back_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_REQUEST_CLASSROOM.value)

        elif payload["text"] == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É":
            request_information = self.classroom_db.get_request_information(user_id, classroom_id)

            self.send_message(user_id,  f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞:\n\n{request_information[3]}\n{request_information[2]}\n\n"
                                        "–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–æ–µ –≤ –∑–∞—è–≤–∫–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)",
                              self.get_keyboard("back_menu_delete_request"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_REQUEST_CLASSROOM.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_request_classroom_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_REQUEST_CLASSROOM"""
        classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

        if payload is None:
            if len(message) <= 50:
                self.classroom_db.insert_new_request(user_id, classroom_id, message)
                keyboard_type = self.get_keyboard_type(user_id, classroom_id)

                self.send_message(user_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", self.get_keyboard(keyboard_type))
                self.user_db.set_user_dialog_state(user_id, States.S_LOOK_CLASSROOM.value)
            else:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 —Å–∏–º–≤–æ–ª–æ–≤! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ",
                                  self.get_keyboard("back_menu"))

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            keyboard_type = self.get_keyboard_type(user_id, classroom_id)

            classroom_name, school_name, access, description = \
                self.classroom_db.get_information_of_classroom(classroom_id)

            members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)
            members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

            self.send_message(user_id, f"–¢—ã –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –∫–ª–∞—Å—Å {classroom_name}\n\n#{classroom_id}\n"
                                       f"–®–∫–æ–ª–∞: {school_name}\n"
                                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                                       f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n"
                                       f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}/{members_limit}",
                              self.get_keyboard(keyboard_type))
            self.user_db.set_user_dialog_state(user_id, States.S_LOOK_CLASSROOM.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_edit_request_classroom_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_EDIT_REQUEST_CLASSROOM"""
        classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

        if payload is None:
            if len(message) <= 50:

                self.classroom_db.update_request(user_id, classroom_id, message)
                keyboard_type = self.get_keyboard_type(user_id, classroom_id)

                self.send_message(user_id, "–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", self.get_keyboard(keyboard_type))
                self.user_db.set_user_dialog_state(user_id, States.S_LOOK_CLASSROOM.value)
            else:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 —Å–∏–º–≤–æ–ª–æ–≤! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ",
                                  self.get_keyboard("back_menu_delete_request"))

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É":
            self.classroom_db.delete_request(user_id, classroom_id)
            keyboard_type = self.get_keyboard_type(user_id, classroom_id)

            self.send_message(user_id, "–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", self.get_keyboard(keyboard_type))
            self.user_db.set_user_dialog_state(user_id, States.S_LOOK_CLASSROOM.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            keyboard_type = self.get_keyboard_type(user_id, classroom_id)

            classroom_name, school_name, access, description = \
                self.classroom_db.get_information_of_classroom(classroom_id)

            members_dictionary = self.classroom_db.get_dict_of_classroom_users(classroom_id)
            members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

            self.send_message(user_id, f"–¢—ã –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –∫–ª–∞—Å—Å {classroom_name}\n\n#{classroom_id}\n"
                                       f"–®–∫–æ–ª–∞: {school_name}\n"
                                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                                       f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n"
                                       f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}/{members_limit}",
                              self.get_keyboard(keyboard_type))
            self.user_db.set_user_dialog_state(user_id, States.S_LOOK_CLASSROOM.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom_id(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def get_keyboard_type(self, user_id: int, classroom_id: int) -> str:
        """Returns keyboard's type"""
        request_information = self.classroom_db.get_request_information(user_id, classroom_id)

        if request_information:
            return "look_classroom_request"
        else:
            access_keyboard_dict = {
                "–ü—É–±–ª–∏—á–Ω—ã–π": "look_classroom_public",
                "–ó–∞—è–≤–∫–∏": "look_classroom_invite",
                "–ó–∞–∫—Ä—ã—Ç—ã–π": "look_classroom_close"
            }

            access = self.classroom_db.get_classroom_access(classroom_id)
            return access_keyboard_dict[access]
