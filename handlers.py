from supporting_functions import *

from classroom import ClassroomCommands
from users import UserDataCommands
from technical_support import TechnicalSupportCommands
from diary_homework import DiaryHomeworkCommands
from states import States


class StateHandlers(SupportingFunctions):
    """Handles states"""

    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id)
        self.user_db = user_db
        self.classroom_db = classroom_db
        self.technical_support_db = technical_support_db
        self.diary_homework_db = diary_homework_db

    def s_nothing_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_NOTHING"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("menu"))

        elif payload["text"] == "–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å":
            self.send_message(user_id, "–ù–∞—Ö–æ–∂—É –∫–ª–∞—Å—Å...",
                              self.get_keyboard("menu"))

        elif payload["text"] == "–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å":
            classroom_id = self.classroom_db.insert_new_classroom(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, classroom_id)
            self.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞):",
                              self.get_keyboard("cancel"))

            self.user_db.set_user_dialog_state(user_id, States.S_ENTER_CLASS_NAME_CLASSCREATE.value)

        elif payload["text"] == "–ú–æ–∏ –∫–ª–∞—Å—Å—ã":
            user_classrooms_dictionary = self.classroom_db.get_user_classrooms_with_role(user_id)

            if not user_classrooms_dictionary:
                self.send_message(user_id, "–ü–æ–∫–∞ —á—Ç–æ —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ!", self.get_keyboard("menu"))

            for classroom_id, role in user_classrooms_dictionary.items():
                keyboard = VkKeyboard(inline=True)
                keyboard.add_callback_button("–í–æ–π—Ç–∏", payload={
                    "text": "enter_the_classroom", "classroom_id": classroom_id
                })

                members_dictionary = self.classroom_db.get_list_of_classroom_users(classroom_id)
                classroom_name, school_name, access, description = \
                    self.classroom_db.get_information_for_creating_classroom(classroom_id)

                self.send_message(user_id, f"#{classroom_id}\n"
                                           f"–ö–ª–∞—Å—Å: {classroom_name}\n"
                                           f"–®–∫–æ–ª–∞: {school_name}\n"
                                           f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                                           f"–ú–æ–≥—É—Ç –ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å: {'–î–∞' if access else '–ù–µ—Ç'}\n"
                                           f"–í—ã: {role}\n"
                                           f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}", keyboard.get_keyboard())

        elif payload["text"] == "–°–æ–∑–¥–∞—Ç—å –±–µ—Å–µ–¥—É –∫–ª–∞—Å—Å–∞":
            self.send_message(user_id, "–°–æ–∑–¥–∞—é –±–µ—Å–µ–¥—É –∫–ª–∞—Å—Å–∞...",
                              self.get_keyboard("menu"))

        elif payload["text"] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–µ–¥—ã –∫–ª–∞—Å—Å–∞":
            self.send_message(user_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–µ–¥—ã –∫–ª–∞—Å—Å–∞...",
                              self.get_keyboard("menu"))

        elif payload["text"] == "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É":
            self.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...",
                              self.get_keyboard("cancel_send"))
            self.user_db.set_user_dialog_state(user_id, States.S_ENTER_TECHNICAL_SUPPORT_MESSAGE.value)

        elif payload["text"] == "enter_the_classroom":
            classroom_id = payload["classroom_id"]
            classroom_name = self.classroom_db.get_classroom_name(classroom_id)
            self.classroom_db.update_user_customize_classroom(user_id, classroom_id)

            self.send_message(user_id, f"–¢—ã –≤ –∫–ª–∞—Å—Å–µ {classroom_name}", self.get_keyboard("my_class_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

    def s_enter_class_name_class_create_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_CLASS_NAME_CLASSCREATE"""
        if payload is None:
            if len(message) > 32:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("cancel"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_name(classroom_id, message)

                next_state, keyboard_type, messages = States.get_next_state_config(
                    States.S_ENTER_CLASS_NAME_CLASSCREATE)
                self.send_message(user_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {message}", self.get_keyboard("empty"))

                self.state_transition(user_id, next_state, keyboard_type, messages)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.cancel_creating_classroom(user_id)

    def s_enter_school_name_class_create_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_SCHOOL_NAME_CLASSCREATE"""
        if payload is None:
            if len(message) > 32:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("cancel"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_school_name(classroom_id, message)

                next_state, keyboard_type, messages = States.get_next_state_config(
                    States.S_ENTER_SCHOOL_NAME_CLASSCREATE)
                self.send_message(user_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞: {message}", self.get_keyboard("empty"))

                self.state_transition(user_id, next_state, keyboard_type, messages)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.cancel_creating_classroom(user_id)

        elif payload["text"] == "–ù–∞ —à–∞–≥ –Ω–∞–∑–∞–¥":
            self.user_db.set_user_dialog_state(user_id, States.S_ENTER_CLASS_NAME_CLASSCREATE.value)

            self.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞):",
                              self.get_keyboard("cancel"))

    def s_enter_access_class_create_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_ENTER_ACCESS_CLASSCREATE"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("yes_no_cancel_back"))

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.cancel_creating_classroom(user_id)

        elif payload["text"] == "–ù–∞ —à–∞–≥ –Ω–∞–∑–∞–¥":
            next_state, keyboard_type, messages = States.get_next_state_config(States.S_ENTER_CLASS_NAME_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, messages)

        elif payload["text"] == "–î–∞":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_classroom_access(classroom_id, True)

            next_state, keyboard_type, messages = States.get_next_state_config(States.S_ENTER_ACCESS_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, messages)

        elif payload["text"] == "–ù–µ—Ç":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_classroom_access(classroom_id, False)

            next_state, keyboard_type, messages = States.get_next_state_config(States.S_ENTER_ACCESS_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, messages)

    def s_enter_description_class_create_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_DESCRIPTION_CLASSCREATE"""
        if payload is None:
            if len(message) > 200:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("cancel_back"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_description(classroom_id, message)
                classroom_name, school_name, access, description = \
                    self.classroom_db.get_information_for_creating_classroom(classroom_id)

                next_state, keyboard_type, messages = States.get_next_state_config(
                    States.S_ENTER_DESCRIPTION_CLASSCREATE)
                self.send_message(user_id, f"–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞:\n"
                                           f"id: {classroom_id}\n"
                                           f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {classroom_name}\n"
                                           f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: {school_name}\n"
                                           f"–ú–æ–≥—É—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å: {'–î–∞' if access else '–ù–µ—Ç'}\n"
                                           f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {description}",
                                  self.get_keyboard("empty"))

                self.state_transition(user_id, next_state, keyboard_type, messages)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.cancel_creating_classroom(user_id)

        elif payload["text"] == "–ù–∞ —à–∞–≥ –Ω–∞–∑–∞–¥":
            next_state, keyboard_type, messages = States.get_next_state_config(States.S_ENTER_SCHOOL_NAME_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, messages)

    def s_submit_class_create_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_SUBMIT_CLASSCREATE"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("submit_back"))

        elif payload["text"] == "–ü—Ä–∏–Ω—è—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.classroom_db.update_classroom_created(classroom_id, True)
            self.diary_homework_db.insert_classroom_id(classroom_id)

            next_state, keyboard_type, messages = States.get_next_state_config(States.S_SUBMIT_CLASSCREATE)
            self.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω", self.get_keyboard("menu"))

            self.state_transition(user_id, next_state, keyboard_type, messages)

        elif payload["text"] == "–û—Ç–∫–ª–æ–Ω–∏—Ç—å":
            next_state, keyboard_type, messages = States.get_next_state_config(States.S_ENTER_ACCESS_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, messages)

    def s_enter_technical_support_message_handler(self, user_id: int, message: str) -> None:
        """Handling States.S_ENTER_TECHNICAL_SUPPORT_MESSAGE"""
        if message == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.cancel_entering_technical_support_message(user_id)

        elif message == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            next_state, keyboard_type, messages = States.get_next_state_config(States.S_ENTER_TECHNICAL_SUPPORT_MESSAGE)
            self.state_transition(user_id, next_state, keyboard_type, messages)

        else:
            user_message = self.technical_support_db.get_message(user_id) + "\n"
            user_message += message
            self.technical_support_db.insert_message(user_id, user_message)

    def s_in_class_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_IN_CLASS_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("my_class_menu"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ":
            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ò–∑–º–µ–Ω–∏—Ç—å", payload={"text": "–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                                                     "classroom_id": self.classroom_db.get_customizing_classroom_id(user_id)})

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            raw_week_lessons = self.diary_homework_db.get_all_days_lessons_from_standard_week(classroom_id)
            formatted_week_lessons = []

            for i in range(0, len(raw_week_lessons), 12):
                formatted_week_lessons.append(raw_week_lessons[i:i+12])
            diary = self.get_week_diary_text(formatted_week_lessons)

            self.send_message(user_id, "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n–ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–µ "
                                       "–∏ –±—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n–ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–µ "
                                       "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n\n" + diary, keyboard.get_keyboard())

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            self.send_message(user_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–∏–¥—è—Ç –í–°–ï —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞—Å—Å–∞!",
                              self.get_keyboard("edit_standard_week"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_STANDARD_WEEK_MYCLASSES.value)

    def s_edit_standard_week_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_STANDARD_WEEK_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("edit_standard_week"))

        elif payload["text"] in ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]:
            weekday_meanings_dict = {
                "–ü–ù": "monday",
                "–í–¢": "tuesday",
                "–°–†": "wednesday",
                "–ß–¢": "thursday",
                "–ü–¢": "friday",
                "–°–ë": "saturday",
                "–í–°": "sunday"
            }
            english_weekday = weekday_meanings_dict[payload["text"]]

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_standard_week(classroom_id, english_weekday)

            if None in formatted_day_lessons:
                formatted_day_lessons = formatted_day_lessons[:formatted_day_lessons.index(None)]

            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, english_weekday)

            self.diary_homework_db.insert_lessons_into_temp_weekday_table(user_id, english_weekday, formatted_day_lessons)
            self.send_message(user_id, weekday_diary_text, self.get_keyboard("edit_standard_weekday"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_STANDARD_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞", self.get_keyboard("my_class_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

    def s_edit_standard_weekday_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_STANDARD_WEEKDAY_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("edit_standard_weekday"))

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)

            if all(formatted_day_lessons):
                self.send_message(user_id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (12) —É—Ä–æ–∫–æ–≤ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ!", self.get_keyboard("edit_standard_weekday"))
            else:
                new_lesson_index = formatted_day_lessons.index(None) + 1

                self.send_message(user_id, f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index}-–≥–æ —É—Ä–æ–∫–∞ (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):", self.get_keyboard("cancel_menu"))
                self.user_db.set_user_dialog_state(user_id, States.S_ADD_NEW_LESSON_MYCLASSES.value)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ\n\n{weekday_diary_text}", self.get_keyboard("edit_standard_weekday"))

            else:
                self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
                weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                new_weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                self.send_message(user_id, f"–í—Å–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã!\n\n{new_weekday_diary_text}", self.get_keyboard("edit_standard_weekday"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.send_message(user_id, "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!", self.get_keyboard("edit_standard_week"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_STANDARD_WEEK_MYCLASSES.value)

    def s_add_new_lesson_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ADD_NEW_LESSON_MYCLASSES"""
        if payload is None:
            if len(message) > 70:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 70 —Å–∏–º–≤–æ–ª–æ–≤!", self.get_keyboard("cancel_menu"))
            else:
                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                new_lesson_index = formatted_day_lessons.index(None) + 1
                self.diary_homework_db.update_add_new_lesson_into_temp_table(user_id, message, new_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                new_weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                self.send_message(user_id, f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}", self.get_keyboard("edit_standard_weekday"))
                self.user_db.set_user_dialog_state(user_id, States.S_EDIT_STANDARD_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.send_message(user_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", self.get_keyboard("edit_standard_weekday"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_STANDARD_WEEKDAY_MYCLASSES.value)

    def state_transition(self, user_id: int, next_state, keyboard_type: str, messages: list) -> None:
        """Changes states"""
        self.user_db.set_user_dialog_state(user_id, next_state.value)

        if messages:
            for message in messages[:-1]:
                self.send_message(user_id, message, self.get_keyboard("empty"))

            self.send_message(user_id, messages[-1], self.get_keyboard(keyboard_type))

    def cancel_creating_classroom(self, user_id: int) -> None:
        """Set state to States.S_NOTHING"""
        classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
        self.classroom_db.delete_classroom(classroom_id)
        self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)
        self.send_message(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", self.get_keyboard("menu"))

    def cancel_entering_technical_support_message(self, user_id: int) -> None:
        """Cancel creating technical support message and set state to States.S_NOTHING"""
        self.send_message(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞", self.get_keyboard("menu"))
        self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    @staticmethod
    def get_weekday_diary_text(formatted_days: list, weekday: str) -> str:
        """Returns text of weekday's diary"""
        weekday_meanings_dict = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ"
        }
        weekday_russian = weekday_meanings_dict[weekday]

        if not any(formatted_days):
            weekday_diary = ["1. –ü–£–°–¢–û"]
        else:
            if None in formatted_days:
                weekday_without_empty = formatted_days[:formatted_days.index(None)]
            else:
                weekday_without_empty = formatted_days.copy()
            weekday_diary = [f"{i}. {weekday_without_empty[i - 1]}" for i in range(1, len(weekday_without_empty) + 1)]

        return weekday_russian + "\n" + "\n".join(weekday_diary)

    @staticmethod
    def get_week_diary_text(formatted_week: list) -> str:
        """Returns text of week's diary"""
        week_diary = []

        weekdays = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        for weekday_name, weekday_list in zip(weekdays, formatted_week):
            if not any(weekday_list):
                week_diary.append(weekday_name + "\n" + "1. –ü–£–°–¢–û")
            else:
                if None in weekday_list:
                    weekday_list_without_empty = weekday_list[:weekday_list.index(None)]
                else:
                    weekday_list_without_empty = weekday_list.copy()

                day_lessons = [f"{i}. {weekday_list_without_empty[i - 1]}" for i in range(1, len(weekday_list_without_empty) + 1)]
                week_diary.append(weekday_name + "\n" + "\n".join(day_lessons))

        return "\n\n".join(week_diary)


class CallbackPayloadHandlers(StateHandlers):
    """Handles callback payloads"""

    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id, user_db=user_db,
                         classroom_db=classroom_db, technical_support_db=technical_support_db,
                         diary_homework_db=diary_homework_db)

    def p_enter_the_classroom_handler(self, user_id: int, payload: dict, current_dialog_state: int) -> None:
        """Handling payload with text: enter_the_classroom"""
        if current_dialog_state == States.S_NOTHING.value:
            self.s_nothing_handler(user_id, payload)
        else:
            self.send_message(user_id, "–ó–∞–∫–æ–Ω—á–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤—ã–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    def p_edit_standard_week_handler(self, user_id: int, payload: dict, current_dialog_state: int) -> None:
        """Handling payload with text: –ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if current_dialog_state == States.S_IN_CLASS_MYCLASSES.value:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

            if classroom_id == payload["classroom_id"]:
                self.s_in_class_my_classes_handler(user_id, payload)
            else:
                self.send_message(user_id, "–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è!")
        else:
            self.send_message(user_id, "–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –∏–∑–º–µ–Ω–∏—Ç—å!")
