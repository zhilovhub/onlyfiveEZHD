from supporting_functions import *

from classroom import ClassroomCommands
from users import UserDataCommands
from technical_support import TechnicalSupportCommands
from diary_homework import DiaryHomeworkCommands
from role import RoleCommands
from states import States


class StateHandlers(SupportingFunctions):
    """Handles states"""

    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id)
        self.user_db = user_db
        self.classroom_db = classroom_db
        self.technical_support_db = technical_support_db
        self.diary_homework_db = diary_homework_db
        self.role_db = role_db

    def s_nothing_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_NOTHING"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("menu"))

        elif payload["text"] == "–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å":
            self.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ id –∫–ª–∞—Å—Å–∞ –≤ "
                                       "—Ñ–æ—Ä–º–∞—Ç–µ #id (–Ω–∞–ø—Ä–∏–º–µ—Ä, #1223)", self.get_keyboard("just_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_FIND_CLASS.value)

        elif payload["text"] == "–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å":
            classroom_id = self.classroom_db.insert_new_classroom()
            role_id = self.role_db.insert_new_role(classroom_id, "–ê–¥–º–∏–Ω", is_admin=True)
            self.role_db.insert_new_role(classroom_id, "–£—á–∞—Å—Ç–Ω–∏–∫", is_default_member=True)
            self.classroom_db.insert_new_user_in_classroom(user_id, classroom_id, role_id)
            self.diary_homework_db.insert_classroom_id(classroom_id)

            self.classroom_db.update_user_customize_classroom(user_id, classroom_id)
            self.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–º–∞–∫—Å. 12 —Å–∏–º–≤–æ–ª–æ–≤):",
                              self.get_keyboard("just_menu"))

            self.user_db.set_user_dialog_state(user_id, States.S_ENTER_CLASS_NAME_CLASSCREATE.value)

        elif payload["text"] == "–ú–æ–∏ –∫–ª–∞—Å—Å—ã":
            user_classrooms_dictionary = self.classroom_db.get_user_classrooms_with_role_id(user_id)

            if not user_classrooms_dictionary:
                self.send_message(user_id, "–ü–æ–∫–∞ —á—Ç–æ —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ!", self.get_keyboard("menu"))

            else:
                elements = []
                for classroom_id, role in user_classrooms_dictionary.items():
                    button = {
                        "action": {
                            "type": "callback",
                            "label": "–í–æ–π—Ç–∏",
                            "payload": {
                                "text": "enter_the_classroom",
                                "classroom_id": classroom_id
                            }
                        }
                    }

                    members_dictionary = self.classroom_db.get_list_of_classroom_users(classroom_id)
                    classroom_name, school_name, access, description = \
                        self.classroom_db.get_information_of_classroom(classroom_id)
                    members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

                    elements.append(
                        {
                            "title": classroom_name + "\n" + school_name,
                            "description": f"#{classroom_id}\n"
                                           f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n"
                                           f"–í—ã: {role}\n"
                                           f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}/{members_limit}",
                            "buttons": [button]
                        }
                    )

                self.send_message(user_id, message="–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫–ª–∞—Å—Å–æ–≤:", template=dumps({
                    "type": "carousel",
                    "elements": elements
                }))

        elif payload["text"] == "–°–æ–∑–¥–∞—Ç—å –±–µ—Å–µ–¥—É –∫–ª–∞—Å—Å–∞":
            self.send_message(user_id, "–°–æ–∑–¥–∞—é –±–µ—Å–µ–¥—É –∫–ª–∞—Å—Å–∞...",
                              self.get_keyboard("menu"))

        elif payload["text"] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–µ–¥—ã –∫–ª–∞—Å—Å–∞":
            self.send_message(user_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–µ–¥—ã –∫–ª–∞—Å—Å–∞...",
                              self.get_keyboard("menu"))

        elif payload["text"] == "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É":
            self.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...",
                              self.get_keyboard("cancel_send"))
            self.user_db.set_user_dialog_state(user_id, States.S_ENTER_TECHNICAL_SUPPORT_MESSAGE.value)

        elif payload["text"] == "enter_the_classroom":
            classroom_id = payload["classroom_id"]
            classroom_name, school_name, access, description = \
                self.classroom_db.get_information_of_classroom(classroom_id)
            self.classroom_db.update_user_customize_classroom(user_id, classroom_id)

            members_dictionary = self.classroom_db.get_list_of_classroom_users(classroom_id)
            members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

            for key, value in members_dictionary.items():
                if key == user_id:
                    role = value
                    break
            else:
                role = None

            self.send_message(user_id, f"–¢—ã –≤ –∫–ª–∞—Å—Å–µ {classroom_name}\n\n#{classroom_id}\n"
                                       f"–®–∫–æ–ª–∞: {school_name}\n"
                                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                                       f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n"
                                       f"–í—ã: {role}\n"
                                       f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}/{members_limit}",
                              self.get_keyboard("my_class_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

    def s_enter_class_name_class_create_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_CLASS_NAME_CLASSCREATE"""
        if payload is None:
            if len(message) > 12:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 12 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("just_menu"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_name(classroom_id, message)

                next_state, keyboard_type, trans_message = States.get_next_state_config(
                    States.S_ENTER_CLASS_NAME_CLASSCREATE)
                trans_message = f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {message}\n\n" + trans_message

                self.state_transition(user_id, next_state, keyboard_type, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.cancel_creating_classroom(user_id)

    def s_enter_school_name_class_create_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_SCHOOL_NAME_CLASSCREATE"""
        if payload is None:
            if len(message) > 32:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("back_menu"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_school_name(classroom_id, message)

                next_state, keyboard_type, trans_message = States.get_next_state_config(
                    States.S_ENTER_SCHOOL_NAME_CLASSCREATE)
                trans_message = f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞: {message}\n\n" + trans_message

                self.state_transition(user_id, next_state, keyboard_type, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.cancel_creating_classroom(user_id)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.user_db.set_user_dialog_state(user_id, States.S_ENTER_CLASS_NAME_CLASSCREATE.value)

            self.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–º–∞–∫—Å. 12 —Å–∏–º–≤–æ–ª–æ–≤):",
                              self.get_keyboard("just_menu"))

    def s_enter_access_class_create_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_ENTER_ACCESS_CLASSCREATE"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("access_menu_back"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.cancel_creating_classroom(user_id)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            next_state, keyboard_type, trans_message = \
                States.get_next_state_config(States.S_ENTER_CLASS_NAME_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, trans_message)

        elif payload["text"] in ["–ü—É–±–ª–∏—á–Ω—ã–π", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", "–ó–∞–∫—Ä—ã—Ç—ã–π"]:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_classroom_access(classroom_id, payload["text"])

            next_state, keyboard_type, trans_message = States.get_next_state_config(States.S_ENTER_ACCESS_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, trans_message)

    def s_enter_description_class_create_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ENTER_DESCRIPTION_CLASSCREATE"""
        if payload is None:
            if len(message) > 200:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("back_menu"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_description(classroom_id, message)
                classroom_name, school_name, access, description = \
                    self.classroom_db.get_information_of_classroom(classroom_id)

                next_state, keyboard_type, trans_message = States.get_next_state_config(
                    States.S_ENTER_DESCRIPTION_CLASSCREATE)
                trans_message = f"–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞:\n" \
                                f"id: {classroom_id}\n" \
                                f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {classroom_name}\n" \
                                f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: {school_name}\n" \
                                f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n" \
                                f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {description}\n\n" + trans_message

                self.state_transition(user_id, next_state, keyboard_type, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.cancel_creating_classroom(user_id)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            next_state, keyboard_type, trans_message = \
                States.get_next_state_config(States.S_ENTER_SCHOOL_NAME_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, trans_message)

    def s_submit_class_create_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_SUBMIT_CLASSCREATE"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("submit_back"))

        elif payload["text"] == "–ü—Ä–∏–Ω—è—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.classroom_db.update_classroom_created(classroom_id, True)

            next_state, keyboard_type, trans_message = States.get_next_state_config(States.S_SUBMIT_CLASSCREATE)

            self.state_transition(user_id, next_state, keyboard_type, trans_message)

        elif payload["text"] == "–û—Ç–∫–ª–æ–Ω–∏—Ç—å":
            next_state, keyboard_type, trans_message = States.get_next_state_config(States.S_ENTER_ACCESS_CLASSCREATE)
            self.state_transition(user_id, next_state, keyboard_type, trans_message)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.cancel_creating_classroom(user_id)

    def s_enter_technical_support_message_handler(self, user_id: int, message: str) -> None:
        """Handling States.S_ENTER_TECHNICAL_SUPPORT_MESSAGE"""
        if message == "–û—Ç–º–µ–Ω–∏—Ç—å":
            self.cancel_entering_technical_support_message(user_id)

        elif message == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            next_state, keyboard_type, trans_message = \
                States.get_next_state_config(States.S_ENTER_TECHNICAL_SUPPORT_MESSAGE)
            self.state_transition(user_id, next_state, keyboard_type, trans_message)

        else:
            user_message = self.technical_support_db.get_message(user_id) + "\n"
            user_message += message
            self.technical_support_db.insert_message(user_id, user_message)

    def s_in_class_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_IN_CLASS_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("my_class_menu"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self.send_message(user_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —Ä–æ–ª–∏ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ!",
                              self.get_keyboard("classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–£—á–∞—Å—Ç–Ω–∏–∫–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            members_dictionary = self.classroom_db.get_list_of_classroom_users(classroom_id)
            roles_dictionary = {}

            for member_id, role_id in members_dictionary.items():
                first_name, last_name = self.user_db.get_user_first_and_last_name(member_id)
                role_name = self.role_db.get_role_name(role_id)

                if role_id in roles_dictionary:
                    roles_dictionary[role_name].append(f"[id{member_id}|{first_name} {last_name}]")
                else:
                    roles_dictionary[role_name] = [f"[id{member_id}|{first_name} {last_name}]"]

            members_text = ""
            ind = 1
            for role_name, members in roles_dictionary.items():
                members_text += f"{role_name}\n"
                for member in members:
                    members_text += f"{ind}. {member}\n"
                    ind += 1
                members_text += "\n"

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                         payload={
                                             "text": "enter_members_settings",
                                             "classroom_id": classroom_id
                                         })

            self.send_message(user_id, members_text, keyboard.get_keyboard())

        elif payload["text"] in ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–µ–µ"]:
            payload_meanings_dict = {
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ": ("edit_standard", "standard", "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n–ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ "
                                                                      "—Ç–µ–∫—É—â–µ–µ –∏ –±—É–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n–ë—É–¥–µ—Ç "
                                                                      "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–µ "
                                                                      "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n\n"),
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ": ("edit_current", "current", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n\n"),
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥—É—â–µ–µ": ("edit_next", "next", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n\n")
            }
            callback_payload_text = payload_meanings_dict[payload["text"]][0]
            week_type = payload_meanings_dict[payload["text"]][1]
            help_text = payload_meanings_dict[payload["text"]][2]

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            keyboard = VkKeyboard(inline=True)
            keyboard.add_callback_button("–ò–∑–º–µ–Ω–∏—Ç—å",
                                         payload={
                                             "text": callback_payload_text,
                                             "classroom_id": classroom_id
                                         })

            self.send_message(user_id, help_text + diary_text, keyboard.get_keyboard())

        elif payload["text"] in ("edit_standard", "edit_current", "edit_next"):
            payload_meanings_dict = {
                "edit_standard": ("standard", "—ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ"),
                "edit_current": ("current", "—Ç–µ–∫—É—â–µ–≥–æ"),
                "edit_next": ("next", "–±—É–¥—É—â–µ–≥–æ")
            }
            week_type = payload_meanings_dict[payload["text"]][0]
            week_type_russian = payload_meanings_dict[payload["text"]][1]

            self.diary_homework_db.insert_row_into_temp_weekday_table(user_id, week_type)
            self.send_message(user_id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {week_type_russian} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è "
                                       f"—É–≤–∏–¥—è—Ç –í–°–ï —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞—Å—Å–∞!",
                              self.get_keyboard(f"edit_{week_type}_week"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEK_MYCLASSES.value)

        elif payload["text"] == "enter_members_settings":
            self.send_message(user_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞\n\n"
                                       "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–æ–ª–∏, —É–¥–∞–ª—è—Ç—å –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
                              self.get_keyboard("members_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MEMBERS_SETTINGS.value)

    def s_members_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MEMBERS_SETTINGS"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("members_settings"))

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            role_names = self.role_db.get_all_role_names_from_classroom(classroom_id)
            role_names_text = "\n".join([f"{ind}. {role_name}" for ind, role_name in enumerate(role_names, start=1)])

            if len(role_names) < 8:
                self.send_message(user_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π\n\n–í –∫–ª–∞—Å—Å–µ "
                                           "–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 8 —Ä–æ–ª–µ–π, –Ω–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 (–∞–¥–º–∏–Ω, —É—á–∞—Å—Ç–Ω–∏–∫)"
                                           ". –†–æ–ª—å –∞–¥–º–∏–Ω–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞—Å—Å–∞, —ç—Ç–∞ —Ä–æ–ª—å –∏–º–µ–µ—Ç –≤—Å–µ "
                                           "–ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n\n–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–ª—É—á–∞—é—Ç —Ç–µ, –∫—Ç–æ —Ç–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ –≤–æ—à–ª–∏ –≤ –∫–ª–∞—Å—Å. "
                                           " –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∫–ª–∞—Å—Å–∞, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞"
                                           " –∏ –∫–∏–∫–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n–†–µ–∫–æ–º–µ–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π —Å "
                                           "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–µ–¥—å —ç—Ç—É —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                                           " –±—É–¥—É—Ç –∏–º–µ—Ç—å –≤—Å–µ –Ω–æ–≤–µ–Ω—å–∫–∏–µ –≤ –∫–ª–∞—Å—Å–µ\n\n"
                                           "–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n" + role_names_text, self.get_keyboard("back_menu"))
                self.user_db.set_user_dialog_state(user_id, States.S_ADD_ROLE_ENTER_NAME_MEMBERS_SETTINGS.value)
            else:
                self.send_message(user_id, "–í—ã —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–æ–ª–µ–π - 8!",
                                  self.get_keyboard("members_settings"))

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞...", self.get_keyboard("my_class_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_add_role_enter_name_members_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_ADD_ROLE_ENTER_NAME_MEMBERS_SETTINGS"""
        if payload is None:
            pass

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...", self.get_keyboard("members_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MEMBERS_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_CLASSROOM_SETTINGS"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("classroom_settings"))

        elif payload["text"] == "–û—Å–Ω–æ–≤–Ω—ã–µ":
            self.send_message(user_id, "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞", self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞...", self.get_keyboard("my_class_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_main_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard("main_classroom_settings"))

        elif payload["text"] == "–¢–∏–ø –∫–ª–∞—Å—Å–∞":
            keyboard_type_dictionary = {
                "–ü—É–±–ª–∏—á–Ω—ã–π": "access_menu_back_public",
                "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è": "access_menu_back_invite",
                "–ó–∞–∫—Ä—ã—Ç—ã–π": "access_menu_back_close"
            }
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            access = self.classroom_db.get_classroom_access(classroom_id)
            keyboard_type = keyboard_type_dictionary[access]

            self.send_message(user_id, "–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∫–ª–∞—Å—Å–∞ (–∑–µ–ª–µ–Ω—ã–º –ø–æ–∫—Ä–∞—à–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç–∏–ø):",
                              self.get_keyboard(keyboard_type))
            self.user_db.set_user_dialog_state(user_id, States.S_ACCESS_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞":
            self.send_message(user_id, "–í–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–¥–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤):",
                              self.get_keyboard("back_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_CLASSROOM_NAME_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã":
            self.send_message(user_id, "–í–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã (–¥–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–∞):",
                              self.get_keyboard("back_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_SCHOOL_NAME_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞":
            self.send_message(user_id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–¥–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):",
                              self.get_keyboard("back_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_DESCRIPTION_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

            self.send_message(user_id, f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_limit}\n\n"
                                       f"–í–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ "
                                       f"—Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 40)",
                              self.get_keyboard("back_menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_LIMIT_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞":
            self.send_message(user_id, "–ú–µ—Å—Ç–æ, –≥–¥–µ —Å—Ç–æ–∏—Ç –±—ã—Ç—å –ø–æ–æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ",
                              self.get_keyboard("main_dangerous_zone_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞...", self.get_keyboard("classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_main_dangerous_zone_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard("main_dangerous_zone_classroom_settings"))

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å":
            self.send_message(user_id, "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å?",
                              self.get_keyboard("main_dangerous_zone_delete_one_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id,
                                               States.S_MAIN_DANGEROUS_ZONE_DELETE_ONE_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∞...",
                              self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_main_dangerous_zone_delete_one_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_DANGEROUS_ZONE_DELETE_ONE_CLASSROOM_SETTINGS"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard("main_dangerous_zone_delete_one_classroom_settings"))

        elif payload["text"] == "–î–∞":
            self.send_message(user_id, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                              self.get_keyboard("main_dangerous_zone_delete_two_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id,
                                               States.S_MAIN_DANGEROUS_ZONE_DELETE_TWO_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–µ—Ç":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É...",
                              self.get_keyboard("main_dangerous_zone_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_main_dangerous_zone_delete_two_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_MAIN_DANGEROUS_ZONE_DELETE_TWO_CLASSROOM_SETTINGS"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard("main_dangerous_zone_delete_two_classroom_settings"))

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            classroom_name = self.classroom_db.get_classroom_name(classroom_id)
            self.classroom_db.delete_classroom(classroom_id)

            self.send_message(user_id, f"–ö–ª–∞—Å—Å —Å –∏–º–µ–Ω–µ–º {classroom_name} —É–¥–∞–ª—ë–Ω!", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–ù–µ —É–¥–∞–ª—è—Ç—å":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É...",
                              self.get_keyboard("main_dangerous_zone_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_DANGEROUS_ZONE_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_edit_week_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_WEEK_MYCLASSES"""
        if payload is None:
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª",
                              self.get_keyboard(f"edit_{week_type}_week"))

        elif payload["text"] in ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]:
            weekday_meanings_dict = {
                "–ü–ù": "monday",
                "–í–¢": "tuesday",
                "–°–†": "wednesday",
                "–ß–¢": "thursday",
                "–ü–¢": "friday",
                "–°–ë": "saturday",
                "–í–°": "sunday"
            }
            english_weekday = weekday_meanings_dict[payload["text"]]

            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_week(classroom_id, week_type,
                                                                                         english_weekday)

            if None in formatted_day_lessons:
                formatted_day_lessons = formatted_day_lessons[:formatted_day_lessons.index(None)]

            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, english_weekday)

            self.diary_homework_db.update_all_lessons_in_temp_weekday_table(user_id, english_weekday,
                                                                            formatted_day_lessons)
            self.send_message(user_id, weekday_diary_text, self.get_keyboard(f"edit_weekday_default"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, "standard")
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_copy_diary_from_week_into_another_week(classroom_id, week_type,
                                                                                 formatted_week_lessons)

            new_formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            week_diary_text = self.get_week_diary_text(new_formatted_week_lessons)

            self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ!\n\n{week_diary_text}",
                              self.get_keyboard(f"edit_{week_type}_week"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞", self.get_keyboard("my_class_menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.user_db.set_user_dialog_state(user_id, States.S_IN_CLASS_MYCLASSES.value)

    def s_edit_weekday_my_classes_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_EDIT_WEEKDAY_MYCLASSES"""
        if payload is None:
            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard("edit_weekday_default"))

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

            if all(formatted_day_lessons):
                self.send_message(user_id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (12) —É—Ä–æ–∫–æ–≤ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))
            else:
                new_lesson_index = formatted_day_lessons.index(None) + 1

                self.send_message(user_id, f"{weekday_diary_text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index}-–≥–æ —É—Ä–æ–∫–∞"
                                           f" (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):",
                                  self.get_keyboard(f"edit_weekday_add"))
                self.user_db.set_user_dialog_state(user_id, States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
            weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)

            if not any(formatted_day_lessons):
                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))
            else:
                self.send_message(user_id, f"{weekday_diary_text}\n\n–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ "
                                           f"—Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,\n7. –ê–ª–≥–µ–±—Ä–∞)",
                                  self.get_keyboard(f"edit_weekday_redact"))
                self.user_db.set_user_dialog_state(user_id, States.S_EDIT_LESSON_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)
                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–µ\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

            else:
                last_lesson_index = formatted_day_lessons.index(None) if None in formatted_day_lessons else 12
                deleted_lesson = formatted_day_lessons[last_lesson_index - 1]
                self.diary_homework_db.update_delete_lesson_from_temp_table(user_id, last_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                self.send_message(user_id, f"–£–¥–∞–ª—ë–Ω {last_lesson_index}. {deleted_lesson}\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë":
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            if not any(formatted_day_lessons):
                weekday_diary_text = self.get_weekday_diary_text(formatted_day_lessons, weekday)
                self.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–µ\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

            else:
                self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                self.send_message(user_id, f"–í—Å–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã!\n\n{weekday_diary_text}",
                                  self.get_keyboard(f"edit_weekday_default"))

        elif payload["text"] == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)

            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            self.diary_homework_db.update_weekday_in_week(classroom_id, formatted_day_lessons, week_type, weekday)
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)

            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            self.send_message(user_id, f"{diary_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                              self.get_keyboard(f"edit_{week_type}_week"))
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEK_MYCLASSES.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.get_keyboard("menu"))
            self.diary_homework_db.delete_row_from_temp_weekday_table(user_id)
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

        elif payload["text"] == "–û—Ç–º–µ–Ω–∏—Ç—å":
            week_type = self.diary_homework_db.get_week_type_from_temp_table(user_id)

            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            formatted_week_lessons = self.diary_homework_db.get_all_days_lessons_from_week(classroom_id, week_type)
            diary_text = self.get_week_diary_text(formatted_week_lessons)

            self.send_message(user_id, f"{diary_text}\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã!",
                              self.get_keyboard(f"edit_{week_type}_week"))
            self.diary_homework_db.update_delete_all_lessons_from_temp_table(user_id)
            self.diary_homework_db.update_delete_weekday_from_temp_table(user_id)
            self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEK_MYCLASSES.value)

    def s_add_new_lesson_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_ADD_NEW_LESSON_WEEKDAY_MYCLASSES"""
        if payload is None:
            if len(message) > 70:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 70 —Å–∏–º–≤–æ–ª–æ–≤!",
                                  self.get_keyboard("edit_weekday_add"))
            else:
                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                new_lesson_index = formatted_day_lessons.index(None) + 1
                self.diary_homework_db.update_add_new_lesson_into_temp_table(user_id, message, new_lesson_index)

                new_formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                new_weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                if new_lesson_index <= 11:
                    self.send_message(user_id, f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}\n\n"
                                               f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {new_lesson_index + 1}-–≥–æ —É—Ä–æ–∫–∞ (–º–∞–∫—Å 70 —Å–∏–º–≤–æ–ª–æ–≤):",
                                      self.get_keyboard("edit_weekday_add"))
                else:
                    self.send_message(user_id, f"–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n{new_weekday_diary_text}.\n\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç!",
                                      self.get_keyboard(f"edit_weekday_default"))
                    self.user_db.set_user_dialog_state(user_id, States.S_EDIT_WEEKDAY_MYCLASSES.value)

        elif payload["text"] == "–î–æ–±–∞–≤–∏—Ç—å":
            self.send_message(user_id, "–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤",
                              self.get_keyboard(f"edit_weekday_add"))

        elif payload["text"]:
            self.s_edit_weekday_my_classes_handler(user_id, payload)

    def s_edit_lesson_weekday_my_classes_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_EDIT_LESSON_WEEKDAY_MYCLASSES"""
        if payload is None:
            ask_message = "–í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: " \
                          "–Ω–æ–º–µ—Ä_—É—Ä–æ–∫–∞. –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,\n7. –ê–ª–≥–µ–±—Ä–∞)"

            if ". " in message:
                lesson_index, lesson_name = message.split(". ")

                formatted_day_lessons = self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                max_lesson_index = formatted_day_lessons.index(None) if None in formatted_day_lessons else 12

                if lesson_index.isdigit():
                    if 0 < int(lesson_index) <= max_lesson_index:
                        if 0 < len(lesson_name) <= 70:
                            self.diary_homework_db.update_lesson_in_temp_table(user_id, lesson_name, lesson_index)

                            new_formatted_day_lessons = \
                                self.diary_homework_db.get_weekday_lessons_from_temp_table(user_id)
                            weekday = self.diary_homework_db.get_weekday_name_from_temp_table(user_id)
                            weekday_diary_text = self.get_weekday_diary_text(new_formatted_day_lessons, weekday)

                            self.send_message(user_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n{weekday_diary_text}\n\n"
                                                       f"{ask_message}",
                                              self.get_keyboard("edit_weekday_redact"))
                        else:
                            self.send_message(user_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ "
                                                       f"70 —Å–∏–º–≤–æ–ª–æ–≤\n\n{ask_message}",
                                              self.get_keyboard("edit_weekday_redact"))
                    else:
                        self.send_message(user_id, f"–£—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç.\n\n{ask_message}",
                                          self.get_keyboard("edit_weekday_redact"))
                else:
                    self.send_message(user_id,
                                      f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}",
                                      self.get_keyboard("edit_weekday_redact"))
            else:
                self.send_message(user_id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}",
                                  self.get_keyboard("edit_weekday_redact"))

        elif payload["text"] == "–ò–∑–º–µ–Ω–∏—Ç—å":
            self.send_message(user_id, "–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤",
                              self.get_keyboard("edit_weekday_redact"))

        elif payload["text"]:
            self.s_edit_weekday_my_classes_handler(user_id, payload)

    def s_find_class_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_FIND_CLASS"""
        if payload is None:
            classroom_id = None
            stripped_message = message.strip()

            if fullmatch(r"#\d+", stripped_message):
                classroom_id = int(stripped_message[1:])

            elif search(r"onlyfiveEZHD/invite_link/\d+", stripped_message):
                result = search(r"onlyfiveEZHD/invite_link/\d+", stripped_message)
                classroom_id = int(stripped_message[result.start():result.end()].split("/")[-1])

            if classroom_id:
                existing_classroom_ids = self.classroom_db.get_list_of_classroom_ids()

                if classroom_id in existing_classroom_ids:
                    keyboard = VkKeyboard(inline=True)
                    keyboard.add_callback_button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", payload={
                        "text": "look_at_the_classroom", "classroom_id": classroom_id
                    })

                    classroom_name, school_name, access, description = \
                        self.classroom_db.get_information_of_classroom(classroom_id)
                    members_dictionary = self.classroom_db.get_list_of_classroom_users(classroom_id)
                    members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

                    for member_user_id in members_dictionary.keys():
                        if user_id == member_user_id:
                            user_in_classroom_text = "–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ ‚úÖ"
                            break
                    else:
                        user_in_classroom_text = "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ ‚ùå"

                    self.send_message(user_id, f"#{classroom_id}\n"
                                               f"–ö–ª–∞—Å—Å: {classroom_name}\n"
                                               f"–®–∫–æ–ª–∞: {school_name}\n"
                                               f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                                               f"–¢–∏–ø –∫–ª–∞—Å—Å–∞: {access}\n"
                                               f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members_dictionary)}/{members_limit}\n\n"
                                               f"{user_in_classroom_text}", keyboard.get_keyboard())
                else:
                    self.send_message(user_id, f"–ö–ª–∞—Å—Å–∞ —Å id {classroom_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                      self.get_keyboard("just_menu"))

            else:
                self.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ id –∫–ª–∞—Å—Å–∞ –≤ "
                                           "—Ñ–æ—Ä–º–∞—Ç–µ #id (–Ω–∞–ø—Ä–∏–º–µ—Ä, #1223)", self.get_keyboard("just_menu"))

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_access_main_classroom_settings_handler(self, user_id: int, payload: dict) -> None:
        """Handling States.S_ACCESS_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            keyboard_type_dictionary = {
                "–ü—É–±–ª–∏—á–Ω—ã–π": "access_menu_back_public",
                "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è": "access_menu_back_invite",
                "–ó–∞–∫—Ä—ã—Ç—ã–π": "access_menu_back_close"
            }
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            access = self.classroom_db.get_classroom_access(classroom_id)
            keyboard_type = keyboard_type_dictionary[access]

            self.send_message(user_id, "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!üëáüèª", self.get_keyboard(keyboard_type))

        elif payload["text"] in ["–ü—É–±–ª–∏—á–Ω—ã–π", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", "–ó–∞–∫—Ä—ã—Ç—ã–π"]:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
            self.classroom_db.update_classroom_access(classroom_id, payload["text"])

            self.send_message(user_id, f"–¢–∏–ø –∫–ª–∞—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {payload['text']}!",
                              self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...", self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_classroom_name_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_CLASSROOM_NAME_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            if len(message) > 12:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 12 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("back_menu"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_name(classroom_id, message)

                self.send_message(user_id, f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {message}",
                                  self.get_keyboard("main_classroom_settings"))
                self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...", self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_school_name_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_SCHOOL_NAME_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            if len(message) > 32:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("back_menu"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_school_name(classroom_id, message)

                self.send_message(user_id, f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: {message}",
                                  self.get_keyboard("main_classroom_settings"))
                self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...", self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_description_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_DESCRIPTION_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            if len(message) > 200:
                self.send_message(user_id, "–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                  self.get_keyboard("back_menu"))
            else:
                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                self.classroom_db.update_classroom_description(classroom_id, message)

                self.send_message(user_id, f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {message}",
                                  self.get_keyboard("main_classroom_settings"))
                self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...", self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def s_limit_main_classroom_settings_handler(self, user_id: int, message: str, payload: dict) -> None:
        """Handling States.S_LIMIT_MAIN_CLASSROOM_SETTINGS"""
        if payload is None:
            ask_message = f"–í–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ " \
                          f"—Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 40)"

            if message.strip().isdigit():
                new_members_limit = int(message.strip())

                classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
                members_count = len(self.classroom_db.get_list_of_classroom_users(classroom_id))
                old_members_limit = self.classroom_db.get_classroom_members_limit(classroom_id)

                if new_members_limit == old_members_limit:
                    self.send_message(user_id, f"–¢–∞–∫–æ–π –ª–∏–º–∏—Ç —É–∂–µ –∏ —Ç–∞–∫ –∑–∞–¥–∞–Ω\n\n{ask_message}",
                                      self.get_keyboard("back_menu"))
                elif members_count <= new_members_limit <= 40:
                    self.classroom_db.update_classroom_members_limit(classroom_id, new_members_limit)

                    self.send_message(user_id, "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
                                      self.get_keyboard("main_classroom_settings"))
                    self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)
                else:
                    self.send_message(user_id, f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª-–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –±–æ–ª—å—à–µ 40\n\n"
                                               f"{ask_message}", self.get_keyboard("back_menu"))
            else:
                self.send_message(user_id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏\n\n{ask_message}", self.get_keyboard("back_menu"))

        elif payload["text"] == "–ù–∞–∑–∞–¥":
            self.send_message(user_id, "–ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...", self.get_keyboard("main_classroom_settings"))
            self.user_db.set_user_dialog_state(user_id, States.S_MAIN_CLASSROOM_SETTINGS.value)

        elif payload["text"] == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", self.get_keyboard("menu"))
            self.classroom_db.update_user_customize_classroom(user_id, "null")
            self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    def state_transition(self, user_id: int, next_state, keyboard_type: str, message: str) -> None:
        """Changes states"""
        self.user_db.set_user_dialog_state(user_id, next_state.value)
        self.send_message(user_id, message, self.get_keyboard(keyboard_type))

    def cancel_creating_classroom(self, user_id: int) -> None:
        """Set state to States.S_NOTHING"""
        classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)
        self.classroom_db.delete_classroom(classroom_id)
        self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)
        self.send_message(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", self.get_keyboard("menu"))

    def cancel_entering_technical_support_message(self, user_id: int) -> None:
        """Cancel creating technical support message and set state to States.S_NOTHING"""
        self.send_message(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞", self.get_keyboard("menu"))
        self.user_db.set_user_dialog_state(user_id, States.S_NOTHING.value)

    @staticmethod
    def get_weekday_diary_text(formatted_days: tuple, weekday: str) -> str:
        """Returns text of weekday's diary"""
        weekday_meanings_dict = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ"
        }
        weekday_russian = weekday_meanings_dict[weekday]

        if not any(formatted_days):
            weekday_diary = ["1. –ü–£–°–¢–û"]
        else:
            if None in formatted_days:
                weekday_without_empty = formatted_days[:formatted_days.index(None)]
            else:
                weekday_without_empty = formatted_days
            weekday_diary = [f"{i}. {weekday_without_empty[i - 1]}" for i in range(1, len(weekday_without_empty) + 1)]

        return weekday_russian + "\n" + "\n".join(weekday_diary)

    @staticmethod
    def get_week_diary_text(formatted_week: list) -> str:
        """Returns text of week's diary"""
        week_diary = []

        weekdays = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        for weekday_name, weekday_tuple in zip(weekdays, formatted_week):
            if not any(weekday_tuple):
                week_diary.append(weekday_name + "\n" + "1. –ü–£–°–¢–û")
            else:
                if None in weekday_tuple:
                    weekday_tuple_without_empty = weekday_tuple[:weekday_tuple.index(None)]
                else:
                    weekday_tuple_without_empty = weekday_tuple

                day_lessons = [f"{i}. {weekday_tuple_without_empty[i - 1]}"
                               for i in range(1, len(weekday_tuple_without_empty) + 1)]
                week_diary.append(weekday_name + "\n" + "\n".join(day_lessons))

        return "\n\n".join(week_diary)


class CallbackPayloadHandlers(StateHandlers):
    """Handles callback payloads"""

    def __init__(self, token: str, group_id: int, user_db: UserDataCommands,
                 classroom_db: ClassroomCommands, technical_support_db: TechnicalSupportCommands,
                 diary_homework_db: DiaryHomeworkCommands, role_db: RoleCommands) -> None:
        """Initialization"""
        super().__init__(token=token, group_id=group_id, user_db=user_db,
                         classroom_db=classroom_db, technical_support_db=technical_support_db,
                         diary_homework_db=diary_homework_db, role_db=role_db)

    def p_enter_the_classroom_handler(self, user_id: int, payload: dict, current_dialog_state: int) -> None:
        """Handling payload with text: enter_the_classroom"""
        if current_dialog_state == States.S_NOTHING.value:
            self.s_nothing_handler(user_id, payload)
        else:
            self.send_message(user_id, "–ó–∞–∫–æ–Ω—á–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤—ã–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    def p_edit_week_handler(self, user_id: int, payload: dict, current_dialog_state: int) -> None:
        """Handling payloads with text: standard | current | next"""
        if current_dialog_state == States.S_IN_CLASS_MYCLASSES.value:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

            if classroom_id == payload["classroom_id"]:
                self.s_in_class_my_classes_handler(user_id, payload)
            else:
                self.send_message(user_id, "–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è!")
        else:
            self.send_message(user_id, "–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –∏–∑–º–µ–Ω–∏—Ç—å!")

    def p_enter_members_settings(self, user_id: int, payload: dict, current_dialog_state: int) -> None:
        """Handling payload with text: enter_member_settings"""
        if current_dialog_state == States.S_IN_CLASS_MYCLASSES.value:
            classroom_id = self.classroom_db.get_customizing_classroom_id(user_id)

            if classroom_id == payload["classroom_id"]:
                self.s_in_class_my_classes_handler(user_id, payload)
            else:
                self.send_message(user_id, "–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ —Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è!")
        else:
            self.send_message(user_id, "–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞, –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è"
                                       " –≤–æ–π—Ç–∏!")
